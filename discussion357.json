{
  "data":
  {
    "repository":
    {
      "discussion":
      {
        "number": 357,
        "title": "Issue with installing \"pysr\" in Python3 Jupyter Notebook ipynb file (exit status 1)",
        "body": "Hi,\r\nI am running Jupyter Notebook on my MacBook computer from a standard computer terminal.\r\nI installed both juliaup and the Julia application itself.\r\nWhen I type \"julia\" in the standard terminal on my MacBook, I get this message: \"Error: The Julia launcher failed to figure out which juliaup channel to use.\" Perhaps I should fix this and perhaps this is what is causing \"!python3 -m pysr install\" command in a Python3 ipynb file to give a error message.\r\n\r\nI went to the localhost:[PORT] website to access the Jupyter Notebook interface.\r\nThen I created a Python3 ipynb file.\r\nThen in the cell blocks of this ipynb file (not on a terminal), I ran:\r\n```\r\n!curl -fsSL https://install.julialang.org | sh\r\n```\r\nThat code gave me this response: \r\n```\r\ninfo: downloading installer\r\nWelcome to Julia!\r\n\r\nIt seems that Juliaup is already installed on this system. Please remove the previous installation of Juliaup before you try to install a new version.\r\n```\r\n\r\nThen I ran \r\n```\r\n!pip3 install -U pysr\r\n```\r\nThis gave me a bunch of \"Requirement satisfied\" messages. A truncated version of the output is:\r\n```\r\nRequirement already satisfied: pysr in /opt/anaconda3/lib/python3.8/site-packages (0.14.2)\r\nRequirement already satisfied: sympy in /opt/anaconda3/lib/python3.8/site-packages (from pysr) (1.8)\r\nRequirement already satisfied: pandas in /opt/anaconda3/lib/python3.8/site-packages (from pysr) (1.2.4)\r\nRequirement already satisfied: numpy in /opt/anaconda3/lib/python3.8/site-packages (from pysr) (1.23.5)\r\nRequirement already satisfied: scikit-learn>=1.0.0 in /opt/anaconda3/lib/python3.8/site-packages (from pysr) (1.2.2)\r\nRequirement already satisfied: julia>=0.6.0 in /opt/anaconda3/lib/python3.8/site-packages (from pysr) (0.6.1)\r\nRequirement already satisfied: click>=7.0.0 in /opt/anaconda3/lib/python3.8/site-packages (from pysr) (7.1.2)\r\n... (there was more \"Requirements satisfieds\" but I cut it off here)\r\n```\r\n\r\nThen I ran \"!python3 -m pysr install\", which gave me my error that I am asking about in this post.\r\nThat command gave me this output:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/opt/anaconda3/lib/python3.8/runpy.py\", line 194, in _run_module_as_main\r\n    return _run_code(code, main_globals, None,\r\n  File \"/opt/anaconda3/lib/python3.8/runpy.py\", line 87, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pysr/__main__.py\", line 4, in <module>\r\n    _cli(prog_name=\"pysr\")\r\n  File \"/opt/anaconda3/lib/python3.8/site-packages/click/core.py\", line 829, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"/opt/anaconda3/lib/python3.8/site-packages/click/core.py\", line 782, in main\r\n    rv = self.invoke(ctx)\r\n  File \"/opt/anaconda3/lib/python3.8/site-packages/click/core.py\", line 1259, in invoke\r\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\r\n  File \"/opt/anaconda3/lib/python3.8/site-packages/click/core.py\", line 1066, in invoke\r\n    return ctx.invoke(self.callback, **ctx.params)\r\n  File \"/opt/anaconda3/lib/python3.8/site-packages/click/core.py\", line 610, in invoke\r\n    return callback(*args, **kwargs)\r\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pysr/_cli/main.py\", line 37, in _install\r\n    install(julia_project, quiet, precompile)\r\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pysr/julia_helpers.py\", line 76, in install\r\n    _julia_version_assertion()\r\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pysr/julia_helpers.py\", line 270, in _julia_version_assertion\r\n    if not is_julia_version_greater_eq(version=(1, 6, 0)):\r\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pysr/julia_helpers.py\", line 134, in is_julia_version_greater_eq\r\n    juliainfo = _load_juliainfo()\r\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pysr/julia_helpers.py\", line 25, in _load_juliainfo\r\n    juliainfo = JuliaInfo.load(julia=\"julia\")\r\n  File \"/opt/anaconda3/lib/python3.8/site-packages/julia/juliainfo.py\", line 87, in load\r\n    raise subprocess.CalledProcessError(\r\nsubprocess.CalledProcessError: Command '['julia', '-e', '...']' returned non-zero exit status 1.\r\n```\r\n\r\n\r\nAdditional question: In order to use your PySR package, I should be using a Python3 ipynb file, not a Julia file, right?\r\nBecause the ultimate code that I write myself to use your PySR package is in Python, not Julia? What I mean, is that I create a PySRRegressor object usign Python code \r\n\r\n```\r\nmodel = PySRRegressor(\r\n    niterations=40,  # < Increase me for better results\r\n    binary_operators=[\"+\", \"*\"])\r\n```\r\nis Python not Julia), not using Julia code, therefore I believe I should be using a Python3 ipynb file to run the commands to install PySR.",
        "comments":
        {
          "nodes":
          [
            {
              "author":
              {
                "login": "MilesCranmer"
              },
              "body": "Hi @unary-code,\r\n\r\nIn future questions could you wrap your code outputs with three backquotes: `\\``? Otherwise it's hard to read your question. I edited your post to add this but just an FYI for future posts :+1:\r\n\r\n>  I should be using a Python3 ipynb file, not a Julia file, right?\r\n\r\nCorrect. Unless you use [SymbolicRegression.jl](github.com/MilesCranmer/SymbolicRegression.jl/) directly in which case you would use the julia kernel.\r\n\r\nIn general I would recommend using IPython instead of Jupyter notebooks though, as the output is cleaner (it's difficult to get Julia to print nice outputs to Jupyter through Python, so I can't use the regular progress bar)\r\n\r\n> Perhaps I should fix this and perhaps this is what is causing \"!python3 -m pysr install\" command in a Python3 ipynb file to give a error message.\r\n\r\nYes, the error `subprocess.CalledProcessError: Command '['julia', '-e', '...']' returned non-zero exit status 1.` just means it could not start Julia. So you will need to fix Julia first before trying to install PySR. Maybe you could try to remove all of your Julia installations completely and install it again? Be sure to only use juliaup, instead of using a combination of different julia versions (e.g., there is one with conda, and another one you can install from a .dmg, and yet another one you can install with brew).\r\n\r\nCheers,\r\nMiles",
              "createdAt": "2023-06-25T19:43:04Z"
            },
            {
              "author":
              {
                "login": "unary-code"
              },
              "body": "Hi,\r\n\r\nThanks, I'll use 3 backslash quotation marks ``` in the future on Github posts.\r\n\r\nWhen I do the following commands, I get this output (does not change between when I have both Julia application and juliaup installed on my computer, and when I only have juliaup installed on my computer):\r\n\r\nDo you have an idea of what causes the following errors?\r\n\r\nWhen I did \"!python3 -m pysr install\", I got a sequence of a lot of lines, but the most important outputted lines were:\r\n```\r\n(some beginning lines of output)\r\n[ Info: Julia executable: /Users/davidkatz/.julia/juliaup/julia-1.9.1+0.aarch64.apple.darwin14/bin/julia\r\n[ Info: Trying to import PyCall...\r\n┌ Error: `import PyCall` failed\r\n│   exception =\r\n│    ArgumentError: Package PyCall [438e738f-606a-5dbb-bf0a-cddfbfd45ab0] is required but does not seem to be installed:\r\n│     - Run `Pkg.instantiate()` to install all recorded dependencies.\r\n│    \r\n│    Stacktrace:\r\n│     [1] _require(pkg::Base.PkgId, env::Nothing)\r\n│       @ Base ./loading.jl:1774\r\n│     [2] _require_prelocked(uuidkey::Base.PkgId, env::Nothing)\r\n│       @ Base ./loading.jl:1660\r\n│     [3] _require_prelocked\r\n│       @ ./loading.jl:1658 [inlined]\r\n│     [4] macro expansion\r\n│       @ ./lock.jl:267 [inlined]\r\n│     [5] require(uuidkey::Base.PkgId)\r\n│       @ Base ./loading.jl:1655\r\n│     [6] top-level scope\r\n│       @ /opt/anaconda3/lib/python3.8/site-packages/julia/install.jl:36\r\n│     [7] include(mod::Module, _path::String)\r\n│       @ Base ./Base.jl:457\r\n│     [8] exec_options(opts::Base.JLOptions)\r\n│       @ Base ./client.jl:307\r\n│     [9] _start()\r\n│       @ Base ./client.jl:522\r\n└ @ Main /opt/anaconda3/lib/python3.8/site-packages/julia/install.jl:38\r\n[ Info: Installing PyCall...\r\n    Updating registry at `~/.julia/registries/General.toml`\r\n   Resolving package versions...\r\n   Installed PyCall ───── v1.96.0\r\n   Installed MacroTools ─ v0.5.10     ]  1/2\r\nmProgress [========================================>]  2/2    Updating `~/.julia/environments/pysr-0.14.2/Project.toml`\r\n  [438e738f] + PyCall v1.96.0\r\n    Updating `~/.julia/environments/pysr-0.14.2/Manifest.toml`\r\n  [8f4d0f93] + Conda v1.9.0\r\n  [682c06a0] + JSON v0.21.4\r\n.... (some other lines)\r\n\r\nBuilding PyCall → `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/f33ca06633c2cf08753d235208fcb46a052072ea/build.log`\r\n... (some other lines)\r\n\r\nProgress [===========================>             ]  2/3\r\n  ◐ PyCall\r\n  Progress [===========================>             ]  2/3\r\n  ◓ PyCall\r\n  Progress [========================================>]  3/3\r\n  3 dependencies successfully precompiled in 8 seconds. 9 already precompiled.\r\n^[]0;Julia^G\r\nPrecompiling PyCall...\r\nImportError: No module named site\r\n^[]0;Julia^GTraceback (most recent call last):\r\n  File \"/opt/anaconda3/lib/python3.8/runpy.py\", line 194, in _run_module_as_main\r\n    return _run_code(code, main_globals, None,\r\n  File \"/opt/anaconda3/lib/python3.8/runpy.py\", line 87, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pysr/__main__.py\", line 4, in <module>\r\n    _cli(prog_name=\"pysr\")\r\n  File \"/opt/anaconda3/lib/python3.8/site-packages/click/core.py\", line 829, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"/opt/anaconda3/lib/python3.8/site-packages/click/core.py\", line 782, in main\r\n    rv = self.invoke(ctx)\r\n  File \"/opt/anaconda3/lib/python3.8/site-packages/click/core.py\", line 1259, in invoke\r\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\r\n  File \"/opt/anaconda3/lib/python3.8/site-packages/click/core.py\", line 1066, in invoke\r\n    return ctx.invoke(self.callback, **ctx.params)\r\n  File \"/opt/anaconda3/lib/python3.8/site-packages/click/core.py\", line 610, in invoke\r\n    return callback(*args, **kwargs)\r\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pysr/_cli/main.py\", line 37, in _install\r\n    install(julia_project, quiet, precompile)\r\n  File \"/opt/anaconda3/lib/python3.8/site-packages/pysr/julia_helpers.py\", line 84, in install\r\n    julia.install(quiet=quiet)\r\n  File \"/opt/anaconda3/lib/python3.8/site-packages/julia/tools.py\", line 127, in install\r\n    raise PyCallInstallError(\"Precompiling\")\r\njulia.tools.PyCallInstallError: Precompiling PyCall failed.\r\n\r\n** Important information from Julia may be printed before Python's Traceback **\r\n\r\nSome useful information may also be stored in the build log file\r\n`~/.julia/packages/PyCall/*/deps/build.log`.\r\n\r\n```\r\n\r\nI was able to do \"from pysr import PySRRegressor\", but then when I did \"model.fit(X, y)\", I got this error:\r\n```\r\nCompiling Julia backend...\r\n(some outputted lines)\r\nOSError: dlopen(/Users/[MYUSER]/.julia/juliaup/julia-1.9.1+0.aarch64.apple.darwin14/lib/libjulia.1.9.dylib, 0x000A): tried: '/Users/[MYUSER]/.julia/juliaup/julia-1.9.1+0.aarch64.apple.darwin14/lib/libjulia.1.9.dylib' (mach-o file, but is an incompatible architecture (have 'arm64', need 'x86_64')), '/usr/local/lib/libjulia.1.9.dylib' (no such file), '/usr/lib/libjulia.1.9.dylib' (no such file)\r\n```\r\n",
              "createdAt": "2023-06-25T20:08:33Z"
            },
            {
              "author":
              {
                "login": "MilesCranmer"
              },
              "body": "Thanks, this is helpful. The following line indicates the issue:\r\n\r\n```\r\nOSError: dlopen(/Users/[MYUSER]/.julia/juliaup/julia-1.9.1+0.aarch64.apple.darwin14/lib/libjulia.1.9.dylib, 0x000A): tried: '/Users/[MYUSER]/.julia/juliaup/julia-1.9.1+0.aarch64.apple.darwin14/lib/libjulia.1.9.dylib' (mach-o file, but is an incompatible architecture (have 'arm64', need 'x86_64')), '/usr/local/lib/libjulia.1.9.dylib' (no such file), '/usr/lib/libjulia.1.9.dylib' (no such file)\r\n```\r\nIn particular: `(mach-o file, but is an incompatible architecture (have 'arm64', need 'x86_64'))` seems to indicate the Julia install is incompatible with the Python install. **My guess is that your Julia install is ARM (correct) but your Python install is x86_64 (incorrect).**\r\n\r\nJust to confirm, you have an M-series macbook, right?\r\n\r\nI think your conda environment was set up to use x86_64, rather than using arm64. This not only means that all of your python libraries will run ~2-3x slower (because OSX needs to translate x86_64 -> arm64 using Rosetta), but it also means you can hit library incompatibility issues like the one seen here.\r\n\r\nIf this guess is correct, I would try to create a new conda environment and make sure to use the correct architecture. This stack overflow answer seems to suggest the right strategy: https://stackoverflow.com/a/65432861/2689923\r\n\r\n```bash\r\nconda env config vars set CONDA_SUBDIR=osx-arm64\r\n```\r\n\r\nand then re-install all the other libraries in your conda env.",
              "createdAt": "2023-06-25T22:14:23Z"
            }
          ],
          "pageInfo":
          {
            "hasNextPage": false,
            "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0wNi0yNVQyMzoxNDoyMyswMTowMM4AX8S4"
          }
        }
      }
    }
  }
}