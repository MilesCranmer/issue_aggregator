{
  "data":
  {
    "repository":
    {
      "discussion":
      {
        "number": 359,
        "title": "How to construct an expression manually from python",
        "body": "When I run this line in my ipynb notebook:\r\n```\r\njl.eval(\"\"\"\r\nmy_arr = [3.4 3; 2 4]\r\nprintln(typeof(my_arr))\r\n\r\nnum_rectangles = 1000\r\n\r\nprintln(\"BEFORE node\")\r\n\r\nx1, x2, x3 = [Node(; feature=i) for i=1:3]\r\nprintln(\"AFTER node\")\r\nprintln(typeof(x1))\r\nprintln(typeof(x1))\r\n\r\nx1 = convert(Node{Float64}, x1)\r\nx2 = convert(Node{Float64}, x2)\r\nx3 = convert(Node{Float64}, x3)\r\n\r\n\r\ntree = cos(x1 - 3.2 * x2) - x1^3.2\r\n\"\"\")\r\n```\r\n\r\nThe outputted error (which refers to the very last line of code so \"tree = cos(x1 - 3.2 * x2) - x1^3.2\") is:\r\n```\r\n\r\nJuliaError: Exception 'MethodError: no method matching *(::Float64, ::Node{Float64})\r\n\r\nClosest candidates are:\r\n  *(::Any, ::Any, !Matched::Any, !Matched::Any...)\r\n   @ Base operators.jl:578\r\n  *(::T, !Matched::T) where T<:Union{Float16, Float32, Float64}\r\n   @ Base float.jl:410\r\n  *(::Union{Float16, Float32, Float64}, !Matched::BigFloat)\r\n   @ Base mpfr.jl:423\r\n  ...\r\n' occurred while calling julia code:\r\n\r\n```\r\n\r\nAny ideas why?\r\nHow do I construct a basic tree in Julia (with the SymbolicRegression Julia package)?\r\n",
        "comments":
        {
          "nodes":
          [
            {
              "author":
              {
                "login": "MilesCranmer"
              },
              "body": "One thing to keep in mind is that the `Node` type does not know what operators you are using. It only stores an index (integer) that references an operator in a list. The reason for this is speed and low memory usage (rather than needing to store function pointers in every node).\r\n\r\nSo, the reason\r\n```julia\r\ntree = cos(x1 - 3.2 * x2) - x1^3.2\r\n```\r\nworks in other instances is because you would have already called\r\n```julia\r\noptions = SymbolicRegression.Options(\r\n    binary_operators=[+, *, /, -, ^],\r\n    unary_operators=[cos],\r\n)\r\n```\r\nbeforehand. Whenever you create `Options` with the operators you want to use, SymbolicRegression will generate some convenience operations so it's easier to create expressions – those convenience operations, like `+` defined on `Node`, would know about what index `+` is stored at (here, `1`).\r\n\r\nHowever, if you want to be more robust or want it to work without needing the `Options`, then you need to call one of the `Node` constructors, from here: https://astroautomata.com/SymbolicRegression.jl/dev/types/#DynamicExpressions.EquationModule.Node.\r\n\r\nFor example, if I know that `+` will be the first operator of my binary operators, I could call:\r\n```julia\r\nNode(1, x1, x2)\r\n```\r\nto create the expression `x1 + x2`. That expression uses this constructor: https://astroautomata.com/SymbolicRegression.jl/dev/types/#DynamicExpressions.EquationModule.Node-Tuple{Int64,%20Node,%20Node}\r\n\r\nLikewise, if I know that `cos` will be the first unary operator, I would call\r\n```julia\r\nNode(1, x1)\r\n```\r\nto create `cos(x1)`.\r\n\r\nBut again, if you've initiated an `Options` object already, the `+` operator will automatically call `Node(1, x1, x2)` (assuming `+` is the first operator).\r\n\r\n---\r\n\r\n(Note if `+` is the second operator in the list, you would instead have\r\n```julia\r\nNode(2, x1, x2)\r\n```\r\nto create `x1 + x2`. )",
              "createdAt": "2023-06-29T22:53:11Z"
            }
          ],
          "pageInfo":
          {
            "hasNextPage": false,
            "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0wNi0yOVQyMzo1MzoxMSswMTowMM4AYG8P"
          }
        }
      }
    }
  }
}