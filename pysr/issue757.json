{
  "data": {
    "repository": {
      "issue": {
        "number": 757,
        "title": "[BUG]: Issues with custom loss and Tensorboard logging using multiprocessing mode",
        "body": "### What happened?\n\nHi! \r\n\r\nFirst of all, thank you for a great package. It's extremely useful in my research and I'm looking forward to being able to cite your work in future papers! \r\n\r\nI mainly use PySR in the multiprocessing mode (as I have struggled to reach a high CPU-utilization when doing multithreading), but it seems to have its limitations and some features only seem to work when doing multithreading. \r\n<details>\r\n<summary>My latest problem came up when trying to run with the new Tensorboard logging: </summary>\r\n<br>\r\nTraceback (most recent call last):\r\n  File \"/Users/isakbe/Dev/modelling/il-sr/il_sr/scripts/run_sr.py\", line 32, in <module>\r\n    main()\r\n  File \"/Users/isakbe/Dev/modelling/il-sr/il_sr/scripts/run_sr.py\", line 23, in main\r\n    trainer.fit_expression()\r\n  File \"/Users/isakbe/Dev/modelling/il-sr/il_sr/scripts/../src/sr_training.py\", line 251, in fit_expression\r\n    self.model.fit(\r\n  File \"/Users/isakbe/Library/Caches/pypoetry/virtualenvs/il-sr-9TFUWRsR-py3.11/lib/python3.11/site-packages/pysr/sr.py\", line 2240, in fit\r\n    self._run(X, y, runtime_params, weights=weights, seed=seed, category=category)\r\n  File \"/Users/isakbe/Library/Caches/pypoetry/virtualenvs/il-sr-9TFUWRsR-py3.11/lib/python3.11/site-packages/pysr/sr.py\", line 2028, in _run\r\n    out = SymbolicRegression.equation_search(\r\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/isakbe/.julia/packages/PythonCall/Nr75f/src/JlWrap/any.jl\", line 258, in __call__\r\n    return self._jl_callmethod($(pyjl_methodnum(pyjlany_call)), args, kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\njuliacall.JuliaError: TaskFailedException\r\nStacktrace:\r\n  [1] wait\r\n    @ ./task.jl:352 [inlined]\r\n  [2] fetch\r\n    @ ./task.jl:372 [inlined]\r\n  [3] _main_search_loop!(state::SymbolicRegression.SearchUtilsModule.SearchState{Float32, Float32, Expression{Float32, Node{Float32}, @NamedTuple{operators::Nothing, variable_names::Nothing}}, Distributed.Future, Distributed.RemoteChannel}, datasets::Vector{Dataset{Float32, Float32, Matrix{Float32}, Vector{Float32}, Nothing, @NamedTuple{}, Nothing, Nothing, Nothing, Nothing}}, ropt::SymbolicRegression.SearchUtilsModule.RuntimeOptions{:multiprocessing, 1, true, SRLogger{TensorBoardLogger.TBLogger{String, IOStream}}}, options::Options{SymbolicRegression.CoreModule.OptionsStructModule.ComplexityMapping{Int64, Int64}, DynamicExpressions.OperatorEnumModule.OperatorEnum, Node, Expression, @NamedTuple{}, MutationWeights, false, true, nothing, Nothing, 5})\r\n    @ SymbolicRegression ~/.julia/packages/SymbolicRegression/44X04/src/SymbolicRegression.jl:833\r\n  [4] _equation_search(datasets::Vector{Dataset{Float32, Float32, Matrix{Float32}, Vector{Float32}, Nothing, @NamedTuple{}, Nothing, Nothing, Nothing, Nothing}}, ropt::SymbolicRegression.SearchUtilsModule.RuntimeOptions{:multiprocessing, 1, true, SRLogger{TensorBoardLogger.TBLogger{String, IOStream}}}, options::Options{SymbolicRegression.CoreModule.OptionsStructModule.ComplexityMapping{Int64, Int64}, DynamicExpressions.OperatorEnumModule.OperatorEnum, Node, Expression, @NamedTuple{}, MutationWeights, false, true, nothing, Nothing, 5}, saved_state::Nothing)\r\n    @ SymbolicRegression ~/.julia/packages/SymbolicRegression/44X04/src/SymbolicRegression.jl:535\r\n  [5] equation_search(datasets::Vector{Dataset{Float32, Float32, Matrix{Float32}, Vector{Float32}, Nothing, @NamedTuple{}, Nothing, Nothing, Nothing, Nothing}}; options::Options{SymbolicRegression.CoreModule.OptionsStructModule.ComplexityMapping{Int64, Int64}, DynamicExpressions.OperatorEnumModule.OperatorEnum, Node, Expression, @NamedTuple{}, MutationWeights, false, true, nothing, Nothing, 5}, saved_state::Nothing, runtime_options::Nothing, runtime_options_kws::@Kwargs{niterations::Int64, parallelism::String, numprocs::Int64, procs::Nothing, addprocs_function::Nothing, heap_size_hint_in_bytes::Nothing, runtests::Bool, return_state::Bool, run_id::String, verbosity::Int64, logger::SRLogger{TensorBoardLogger.TBLogger{String, IOStream}}, progress::Bool, v_dim_out::Val{1}})\r\n    @ SymbolicRegression ~/.julia/packages/SymbolicRegression/44X04/src/SymbolicRegression.jl:525\r\n  [6] equation_search\r\n    @ ~/.julia/packages/SymbolicRegression/44X04/src/SymbolicRegression.jl:506 [inlined]\r\n  [7] #equation_search#20\r\n    @ ~/.julia/packages/SymbolicRegression/44X04/src/SymbolicRegression.jl:476 [inlined]\r\n  [8] equation_search\r\n    @ ~/.julia/packages/SymbolicRegression/44X04/src/SymbolicRegression.jl:422 [inlined]\r\n  [9] #equation_search#21\r\n    @ ~/.julia/packages/SymbolicRegression/44X04/src/SymbolicRegression.jl:499 [inlined]\r\n [10] pyjlany_call(self::typeof(equation_search), args_::Py, kwargs_::Py)\r\n    @ PythonCall.JlWrap ~/.julia/packages/PythonCall/Nr75f/src/JlWrap/any.jl:40\r\n [11] _pyjl_callmethod(f::Any, self_::Ptr{PythonCall.C.PyObject}, args_::Ptr{PythonCall.C.PyObject}, nargs::Int64)\r\n    @ PythonCall.JlWrap ~/.julia/packages/PythonCall/Nr75f/src/JlWrap/base.jl:73\r\n [12] _pyjl_callmethod(o::Ptr{PythonCall.C.PyObject}, args::Ptr{PythonCall.C.PyObject})\r\n    @ PythonCall.JlWrap.Cjl ~/.julia/packages/PythonCall/Nr75f/src/JlWrap/C.jl:63\r\n\r\nnested task error: On worker 2:\r\n    KeyError: key TensorBoardLogger [899adc3e-224a-11e9-021f-63837185c80f] not found\r\n    Stacktrace:\r\n      [1] deserialize_module\r\n        @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:994\r\n      [2] handle_deserialize\r\n        @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:896\r\n      [3] deserialize\r\n        @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:814\r\n      [4] deserialize_datatype\r\n        @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:1398\r\n      [5] handle_deserialize\r\n        @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:867\r\n      [6] deserialize\r\n        @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:814\r\n      [7] deserialize_datatype\r\n        @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:1423\r\n      [8] handle_deserialize\r\n        @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:867\r\n      [9] deserialize\r\n        @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:814\r\n     [10] deserialize_datatype\r\n        @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:1423\r\n     [11] handle_deserialize\r\n        @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:867\r\n     [12] deserialize\r\n        @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:814\r\n     [13] deserialize_datatype\r\n        @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:1423\r\n     [14] handle_deserialize\r\n        @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:867\r\n     [15] deserialize\r\n        @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:814\r\n     [16] handle_deserialize\r\n        @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:874\r\n     [17] deserialize\r\n        @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:814 [inlined]\r\n     [18] deserialize_msg\r\n        @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/messages.jl:87\r\n     [19] #invokelatest#2\r\n        @ ./essentials.jl:892 [inlined]\r\n     [20] invokelatest\r\n        @ ./essentials.jl:889 [inlined]\r\n     [21] message_handler_loop\r\n        @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/process_messages.jl:176\r\n     [22] process_tcp_streams\r\n        @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/process_messages.jl:133\r\n     [23] #103\r\n        @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/process_messages.jl:121\r\n    Stacktrace:\r\n     [1] remotecall_fetch(f::Function, w::Distributed.Worker, args::Distributed.RRID; kwargs::@Kwargs{})\r\n       @ Distributed /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/remotecall.jl:465\r\n     [2] remotecall_fetch(f::Function, w::Distributed.Worker, args::Distributed.RRID)\r\n       @ Distributed /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/remotecall.jl:454\r\n     [3] remotecall_fetch\r\n       @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/remotecall.jl:492 [inlined]\r\n     [4] call_on_owner\r\n       @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/remotecall.jl:565 [inlined]\r\n     [5] fetch(r::Distributed.Future)\r\n       @ Distributed /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/remotecall.jl:619\r\n     [6] (::SymbolicRegression.var\"#56#61\"{SymbolicRegression.SearchUtilsModule.SearchState{Float32, Float32, Expression{Float32, Node{Float32}, @NamedTuple{operators::Nothing, variable_names::Nothing}}, Distributed.Future, Distributed.RemoteChannel}, Int64, Int64})()\r\n       @ SymbolicRegression ~/.julia/packages/SymbolicRegression/44X04/src/SymbolicRegression.jl:810\r\n</details>\r\n\r\nI have also had problems running custom loss functions in multiprocessing mode, so I thought the errors might be related. Unfortunately I'm not really fluent enough in Julia to get to the bottom of the problems and try to fix them myself, so I'd be grateful for all the help I can get. \r\n\r\nMy other option would be to only use multithreading, but I've really struggled to utilize my CPU-resources when trying that. This seems to be a known issue, but if someone would have any more suggestions on how to optimize the settings for multithreading I'd be grateful. I mainly run PySR on a distributed SLURM-cluster. \r\n\r\nOnce again, thank you for a great package!\r\n\n\n### Version\n\n1.0.0\n\n### Operating System\n\nmacOS\n\n### Package Manager\n\npip\n\n### Interface\n\nScript (i.e., `python my_script.py`)\n\n### Relevant log output\n\n```shell\nTraceback (most recent call last): File \"/Users/isakbe/Dev/modelling/il-sr/il_sr/scripts/run_sr.py\", line 32, in main() File \"/Users/isakbe/Dev/modelling/il-sr/il_sr/scripts/run_sr.py\", line 23, in main trainer.fit_expression() File \"/Users/isakbe/Dev/modelling/il-sr/il_sr/scripts/../src/sr_training.py\", line 251, in fit_expression self.model.fit( File \"/Users/isakbe/Library/Caches/pypoetry/virtualenvs/il-sr-9TFUWRsR-py3.11/lib/python3.11/site-packages/pysr/sr.py\", line 2240, in fit self._run(X, y, runtime_params, weights=weights, seed=seed, category=category) File \"/Users/isakbe/Library/Caches/pypoetry/virtualenvs/il-sr-9TFUWRsR-py3.11/lib/python3.11/site-packages/pysr/sr.py\", line 2028, in _run out = SymbolicRegression.equation_search( ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/Users/isakbe/.julia/packages/PythonCall/Nr75f/src/JlWrap/any.jl\", line 258, in __call__ return self._jl_callmethod($(pyjl_methodnum(pyjlany_call)), args, kwargs) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ juliacall.JuliaError: TaskFailedException Stacktrace: [1] wait @ ./task.jl:352 [inlined] [2] fetch @ ./task.jl:372 [inlined] [3] _main_search_loop!(state::SymbolicRegression.SearchUtilsModule.SearchState{Float32, Float32, Expression{Float32, Node{Float32}, @NamedTuple{operators::Nothing, variable_names::Nothing}}, Distributed.Future, Distributed.RemoteChannel}, datasets::Vector{Dataset{Float32, Float32, Matrix{Float32}, Vector{Float32}, Nothing, @NamedTuple{}, Nothing, Nothing, Nothing, Nothing}}, ropt::SymbolicRegression.SearchUtilsModule.RuntimeOptions{:multiprocessing, 1, true, SRLogger{TensorBoardLogger.TBLogger{String, IOStream}}}, options::Options{SymbolicRegression.CoreModule.OptionsStructModule.ComplexityMapping{Int64, Int64}, DynamicExpressions.OperatorEnumModule.OperatorEnum, Node, Expression, @NamedTuple{}, MutationWeights, false, true, nothing, Nothing, 5}) @ SymbolicRegression ~/.julia/packages/SymbolicRegression/44X04/src/SymbolicRegression.jl:833 [4] _equation_search(datasets::Vector{Dataset{Float32, Float32, Matrix{Float32}, Vector{Float32}, Nothing, @NamedTuple{}, Nothing, Nothing, Nothing, Nothing}}, ropt::SymbolicRegression.SearchUtilsModule.RuntimeOptions{:multiprocessing, 1, true, SRLogger{TensorBoardLogger.TBLogger{String, IOStream}}}, options::Options{SymbolicRegression.CoreModule.OptionsStructModule.ComplexityMapping{Int64, Int64}, DynamicExpressions.OperatorEnumModule.OperatorEnum, Node, Expression, @NamedTuple{}, MutationWeights, false, true, nothing, Nothing, 5}, saved_state::Nothing) @ SymbolicRegression ~/.julia/packages/SymbolicRegression/44X04/src/SymbolicRegression.jl:535 [5] equation_search(datasets::Vector{Dataset{Float32, Float32, Matrix{Float32}, Vector{Float32}, Nothing, @NamedTuple{}, Nothing, Nothing, Nothing, Nothing}}; options::Options{SymbolicRegression.CoreModule.OptionsStructModule.ComplexityMapping{Int64, Int64}, DynamicExpressions.OperatorEnumModule.OperatorEnum, Node, Expression, @NamedTuple{}, MutationWeights, false, true, nothing, Nothing, 5}, saved_state::Nothing, runtime_options::Nothing, runtime_options_kws::@kwargs{niterations::Int64, parallelism::String, numprocs::Int64, procs::Nothing, addprocs_function::Nothing, heap_size_hint_in_bytes::Nothing, runtests::Bool, return_state::Bool, run_id::String, verbosity::Int64, logger::SRLogger{TensorBoardLogger.TBLogger{String, IOStream}}, progress::Bool, v_dim_out::Val{1}}) @ SymbolicRegression ~/.julia/packages/SymbolicRegression/44X04/src/SymbolicRegression.jl:525 [6] equation_search @ ~/.julia/packages/SymbolicRegression/44X04/src/SymbolicRegression.jl:506 [inlined] [7] #equation_search#20 @ ~/.julia/packages/SymbolicRegression/44X04/src/SymbolicRegression.jl:476 [inlined] [8] equation_search @ ~/.julia/packages/SymbolicRegression/44X04/src/SymbolicRegression.jl:422 [inlined] [9] #equation_search#21 @ ~/.julia/packages/SymbolicRegression/44X04/src/SymbolicRegression.jl:499 [inlined] [10] pyjlany_call(self::typeof(equation_search), args_::Py, kwargs_::Py) @ PythonCall.JlWrap ~/.julia/packages/PythonCall/Nr75f/src/JlWrap/any.jl:40 [11] _pyjl_callmethod(f::Any, self_::Ptr{PythonCall.C.PyObject}, args_::Ptr{PythonCall.C.PyObject}, nargs::Int64) @ PythonCall.JlWrap ~/.julia/packages/PythonCall/Nr75f/src/JlWrap/base.jl:73 [12] _pyjl_callmethod(o::Ptr{PythonCall.C.PyObject}, args::Ptr{PythonCall.C.PyObject}) @ PythonCall.JlWrap.Cjl ~/.julia/packages/PythonCall/Nr75f/src/JlWrap/C.jl:63\r\nnested task error: On worker 2:\r\nKeyError: key TensorBoardLogger [899adc3e-224a-11e9-021f-63837185c80f] not found\r\nStacktrace:\r\n[1] deserialize_module\r\n@ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:994\r\n[2] handle_deserialize\r\n@ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:896\r\n[3] deserialize\r\n@ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:814\r\n[4] deserialize_datatype\r\n@ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:1398\r\n[5] handle_deserialize\r\n@ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:867\r\n[6] deserialize\r\n@ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:814\r\n[7] deserialize_datatype\r\n@ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:1423\r\n[8] handle_deserialize\r\n@ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:867\r\n[9] deserialize\r\n@ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:814\r\n[10] deserialize_datatype\r\n@ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:1423\r\n[11] handle_deserialize\r\n@ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:867\r\n[12] deserialize\r\n@ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:814\r\n[13] deserialize_datatype\r\n@ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:1423\r\n[14] handle_deserialize\r\n@ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:867\r\n[15] deserialize\r\n@ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:814\r\n[16] handle_deserialize\r\n@ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:874\r\n[17] deserialize\r\n@ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Serialization/src/Serialization.jl:814 [inlined]\r\n[18] deserialize_msg\r\n@ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/messages.jl:87\r\n[19] #invokelatest#2\r\n@ ./essentials.jl:892 [inlined]\r\n[20] invokelatest\r\n@ ./essentials.jl:889 [inlined]\r\n[21] message_handler_loop\r\n@ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/process_messages.jl:176\r\n[22] process_tcp_streams\r\n@ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/process_messages.jl:133\r\n[23] #103\r\n@ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/process_messages.jl:121\r\nStacktrace:\r\n[1] remotecall_fetch(f::Function, w::Distributed.Worker, args::Distributed.RRID; kwargs::@kwargs{})\r\n@ Distributed /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/remotecall.jl:465\r\n[2] remotecall_fetch(f::Function, w::Distributed.Worker, args::Distributed.RRID)\r\n@ Distributed /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/remotecall.jl:454\r\n[3] remotecall_fetch\r\n@ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/remotecall.jl:492 [inlined]\r\n[4] call_on_owner\r\n@ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/remotecall.jl:565 [inlined]\r\n[5] fetch(r::Distributed.Future)\r\n@ Distributed /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/remotecall.jl:619\r\n[6] (::SymbolicRegression.var\"#56#61\"{SymbolicRegression.SearchUtilsModule.SearchState{Float32, Float32, Expression{Float32, Node{Float32}, @NamedTuple{operators::Nothing, variable_names::Nothing}}, Distributed.Future, Distributed.RemoteChannel}, Int64, Int64})()\r\n@ SymbolicRegression ~/.julia/packages/SymbolicRegression/44X04/src/SymbolicRegression.jl:810\n```\n\n\n### Extra Info\n\n_No response_",
        "comments": {
          "nodes": [
            {
              "author": {
                "login": "MilesCranmer"
              },
              "body": "Ah, I know what this is. I'll make a patch later today.\n\nIt's basically just TensorBoardLogger not being imported on the worker process. There's an easy (internal) fix in SymbolicRegression.jl that I do for all the other extensions, but I guess not for TBLogger yet.",
              "createdAt": "2024-12-02T10:44:40Z"
            },
            {
              "author": {
                "login": "MilesCranmer"
              },
              "body": "Basically we just need to add `:TensorBoardLogger` to this: https://github.com/MilesCranmer/SymbolicRegression.jl/blob/8356f4821c9dafb8ee66f862dce46b97c3ec3a6c/src/Configure.jl#L240",
              "createdAt": "2024-12-02T10:48:09Z"
            },
            {
              "author": {
                "login": "MilesCranmer"
              },
              "body": "Also please share the issues with the custom loss as I might be able to solve that too ",
              "createdAt": "2024-12-02T10:51:45Z"
            },
            {
              "author": {
                "login": "ibengtsson"
              },
              "body": "Thanks for the quick reply! Will post a separate issue for the custom loss then.",
              "createdAt": "2024-12-02T11:49:51Z"
            },
            {
              "author": {
                "login": "MilesCranmer"
              },
              "body": "https://github.com/MilesCranmer/PySR/pull/780 should fix this, sorry for the delay.",
              "createdAt": "2024-12-13T23:44:39Z"
            }
          ],
          "pageInfo": {
            "hasNextPage": false,
            "endCursor": "Y3Vyc29yOnYyOpHOl4xT0A=="
          }
        }
      }
    }
  }
}