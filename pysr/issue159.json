{
  "data": {
    "repository": {
      "issue": {
        "number": 159,
        "title": "Julia cannot unlink hall of fame files (resource busy or locked)",
        "body": "**Describe the bug**\r\nWhen running `model.fit()`, the process will stop at a seemingly random iteration number.  This may be due to collisions between workers when using `multithreading=False`.  The issue can surface at any time during the run.\r\n\r\n**Version (please include the following information):**\r\n- OS: Windows 11\r\n- Julia version 1.7.3\r\n- Python version 3.10.5\r\n- PySR version 0.9.3\r\n- Does the bug still appear with the latest version of PySR? **yes**\r\n\r\n**Configuration**\r\n\r\n```python\r\n#import libs\r\nimport numpy as np\r\nfrom pysr import PySRRegressor\r\nfrom matplotlib import pyplot as plt\r\nimport pandas as pd\r\n\r\n#import data from csv\r\ndata = pd.read_csv (r'C:\\Users\\matth\\PycharmProjects\\psrig\\7209fa.csv')\r\ndf=pd.DataFrame(data, columns=['x1','p1','p2','p3','p4','p5''])\r\n\r\n#model setup\r\nmodel = PySRRegressor(\r\n    model_selection=\"best\",  # Result is mix of simplicity+accuracy\r\n    niterations=1000,\r\n    multithreading=False,\r\n    procs=24,\r\n    populations=48,\r\n    population_size=96,\r\n    update=False,\r\n    complexity_of_constants=2,\r\n    \r\n    binary_operators=[\"+\", \"*\",\"/\",\"-\"],\r\n    unary_operators=[\r\n        \"exp\"\r\n    ],\r\n    loss=\"loss(x, y) = (x - y)^2\",\r\n    # ^ Custom loss function (julia syntax)\r\n)\r\n#run the fit\r\nmodel.fit(X,y)\r\n```\r\n\r\n**Error message**\r\n\r\nJupyter output:\r\n```Python\r\nC:\\Users\\user\\PycharmProjects\\pythonProject12\\venv\\lib\\site-packages\\pysr\\sr.py:1067: UserWarning: Note: it looks like you are running in Jupyter. The progress bar will be turned off.\r\n  warnings.warn(\r\n---------------------------------------------------------------------------\r\nRuntimeError                              Traceback (most recent call last)\r\nInput In [5], in <cell line: 1>()\r\n----> 1 model.fit(X,y)\r\n\r\nFile ~\\PycharmProjects\\pythonProject12\\venv\\lib\\site-packages\\pysr\\sr.py:1606, in PySRRegressor.fit(self, X, y, Xresampled, weights, variable_names)\r\n   1597 _check_assertions(\r\n   1598     X,\r\n   1599     use_custom_variable_names,\r\n   (...)\r\n   1602     y,\r\n   1603 )\r\n   1605 # Fitting procedure\r\n-> 1606 return self._run(X, y, mutated_params, weights=weights, seed=seed)\r\n\r\nFile ~\\PycharmProjects\\pythonProject12\\venv\\lib\\site-packages\\pysr\\sr.py:1469, in PySRRegressor._run(self, X, y, mutated_params, weights, seed)\r\n   1465 cprocs = 0 if multithreading else self.procs\r\n   1467 # Call to Julia backend.\r\n   1468 # See https://github.com/MilesCranmer/SymbolicRegression.jl/blob/master/src/SymbolicRegression.jl\r\n-> 1469 self.raw_julia_state_ = Main.EquationSearch(\r\n   1470     Main.X,\r\n   1471     Main.y,\r\n   1472     weights=Main.weights,\r\n   1473     niterations=int(self.niterations),\r\n   1474     varMap=self.feature_names_in_.tolist(),\r\n   1475     options=options,\r\n   1476     numprocs=int(cprocs),\r\n   1477     multithreading=bool(multithreading),\r\n   1478     saved_state=self.raw_julia_state_,\r\n   1479     addprocs_function=cluster_manager,\r\n   1480 )\r\n   1482 # Set attributes\r\n   1483 self.equations_ = self.get_hof()\r\n\r\nRuntimeError: <PyCall.jlwrap (in a Julia function called from Python)\r\nJULIA: IOError: unlink(\"hall_of_fame_2022-07-07_154848.101.csv.bkup\"): resource busy or locked (EBUSY)\r\nStacktrace:\r\n  [1] uv_error\r\n    @ .\\libuv.jl:97 [inlined]\r\n  [2] unlink(p::String)\r\n    @ Base.Filesystem .\\file.jl:958\r\n  [3] rm(path::String; force::Bool, recursive::Bool)\r\n    @ Base.Filesystem .\\file.jl:276\r\n  [4] checkfor_mv_cp_cptree(src::String, dst::String, txt::String; force::Bool)\r\n    @ Base.Filesystem .\\file.jl:323\r\n  [5] cp(src::String, dst::String; force::Bool, follow_symlinks::Bool)\r\n    @ Base.Filesystem .\\file.jl:364\r\n  [6] _EquationSearch(::SymbolicRegression.CoreModule.ProgramConstantsModule.SRDistributed, datasets::Vector{SymbolicRegression.CoreModule.DatasetModule.Dataset{Float32}}; niterations::Int64, options::Options{Tuple{typeof(+), typeof(*), typeof(/), typeof(-)}, Tuple{typeof(exp)}, Nothing, Nothing, typeof(loss), Int64}, numprocs::Int64, procs::Nothing, runtests::Bool, saved_state::Nothing, addprocs_function::Nothing)\r\n    @ SymbolicRegression C:\\Users\\user\\.julia\\packages\\SymbolicRegression\\nlE1i\\src\\SymbolicRegression.jl:762\r\n  [7] EquationSearch(datasets::Vector{SymbolicRegression.CoreModule.DatasetModule.Dataset{Float32}}; niterations::Int64, options::Options{Tuple{typeof(+), typeof(*), typeof(/), typeof(-)}, Tuple{typeof(exp)}, Nothing, Nothing, typeof(loss), Int64}, numprocs::Int64, procs::Nothing, multithreading::Bool, runtests::Bool, saved_state::Nothing, addprocs_function::Nothing)\r\n    @ SymbolicRegression C:\\Users\\user\\.julia\\packages\\SymbolicRegression\\nlE1i\\src\\SymbolicRegression.jl:325\r\n  [8] EquationSearch(X::Matrix{Float32}, y::Matrix{Float32}; niterations::Int64, weights::Nothing, varMap::Vector{String}, options::Options{Tuple{typeof(+), typeof(*), typeof(/), typeof(-)}, Tuple{typeof(exp)}, Nothing, Nothing, typeof(loss), Int64}, numprocs::Int64, procs::Nothing, multithreading::Bool, runtests::Bool, saved_state::Nothing, addprocs_function::Nothing)\r\n    @ SymbolicRegression C:\\Users\\user\\.julia\\packages\\SymbolicRegression\\nlE1i\\src\\SymbolicRegression.jl:269\r\n  [9] #EquationSearch#21\r\n    @ C:\\Users\\user\\.julia\\packages\\SymbolicRegression\\nlE1i\\src\\SymbolicRegression.jl:294 [inlined]\r\n [10] invokelatest(::Any, ::Any, ::Vararg{Any}; kwargs::Base.Pairs{Symbol, Any, NTuple{8, Symbol}, NamedTuple{(:weights, :niterations, :varMap, :options, :numprocs, :multithreading, :saved_state, :addprocs_function), Tuple{Nothing, Int64, Vector{String}, Options{Tuple{typeof(+), typeof(*), typeof(/), typeof(-)}, Tuple{typeof(exp)}, Nothing, Nothing, typeof(loss), Int64}, Int64, Bool, Nothing, Nothing}}})\r\n    @ Base .\\essentials.jl:718\r\n [11] _pyjlwrap_call(f::Function, args_::Ptr{PyCall.PyObject_struct}, kw_::Ptr{PyCall.PyObject_struct})\r\n    @ PyCall C:\\Users\\user\\.julia\\packages\\PyCall\\7a7w0\\src\\callback.jl:32\r\n [12] pyjlwrap_call(self_::Ptr{PyCall.PyObject_struct}, args_::Ptr{PyCall.PyObject_struct}, kw_::Ptr{PyCall.PyObject_struct})\r\n    @ PyCall C:\\Users\\user\\.julia\\packages\\PyCall\\7a7w0\\src\\callback.jl:44>\r\n```\r\n\r\n**Terninal Output**\r\n\r\n ```python\r\n[I 15:48:41.988 NotebookApp] Kernel started: 0354d1ee-8d54-416c-b699-755b2da8877b, name: python3\r\n[IPKernelApp] ERROR | No such comm target registered: jupyter.widget.control\r\n[IPKernelApp] WARNING | No such comm: afedf9f3-a00b-452d-a52d-d1f822f6c55a\r\n  Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n    Updating registry at `C:\\Users\\matth\\.julia\\registries\\General.toml`\r\n   Resolving package versions...\r\n  No Changes to `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3\\Project.toml`\r\n  No Changes to `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3\\Manifest.toml`\r\n   Resolving package versions...\r\n  No Changes to `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3\\Project.toml`\r\n  No Changes to `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3\\Manifest.toml`\r\nActivating environment on workers.\r\n      From worker 5:      Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n      From worker 10:     Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n      From worker 21:     Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n      From worker 17:     Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n      From worker 9:      Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n      From worker 22:     Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n      From worker 2:      Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n      From worker 11:     Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n      From worker 18:     Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n      From worker 6:      Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n      From worker 23:     Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n      From worker 7:      Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n      From worker 3:      Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n      From worker 20:     Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n      From worker 12:     Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n      From worker 14:     Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n      From worker 16:     Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n      From worker 19:     Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n      From worker 4:      Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n      From worker 8:      Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n      From worker 13:     Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n      From worker 15:     Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n      From worker 24:     Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\n      From worker 25:     Activating project at `C:\\Users\\matth\\.julia\\environments\\pysr-0.9.3`\r\nImporting installed module on workers...Finished!\r\nCopying definition of loss to workers...Finished!\r\nTesting module on workers...Finished!\r\nTesting entire pipeline on workers...Finished!\r\nStarted!\r\n\r\nCycles per second: 2.080e+05\r\nHead worker occupation: 21.7%\r\nProgress: 197 / 48000 total iterations (0.410%)\r\n==============================\r\nHall of Fame:\r\n-----------------------------------------\r\nComplexity  loss       Score     Equation\r\n1           1.093e-02  6.688e-01  y0\r\n3           5.800e-03  3.169e-01  (y0 + fi)\r\n4           5.637e-03  2.854e-02  (y0 + 0.07277494)\r\n6           4.774e-03  8.314e-02  (y0 + (ta * 0.002610847))\r\n8           4.435e-03  3.676e-02  (y0 + ((y0 * ta) * -0.002980306))\r\n10          4.354e-03  9.231e-03  ((y0 - fa) + ((y0 * ta) * -0.003470783))\r\n12          4.354e-03  2.417e-05  ((y0 - fa) + (((y0 * ta) + fa0) * -0.003470783))\r\n13          2.686e-03  4.832e-01  (((fi / (exp(exp(y0)) + y0)) * -3.89227) - 0.39196232)\r\n16          2.643e-03  5.305e-03  ((((fi * exp(y0)) / (exp(exp(y0)) + y0)) * -15.155628) - 0.16375335)\r\n20          2.643e-03  1.043e-07  (((((fi * exp(y0)) / (exp(exp(y0)) + y0)) * (-15.141415 - fa)) - 0.1777615) + fa)\r\n\r\n==============================\r\nPress 'q' and then <enter> to stop execution early.\r\n\r\nCycles per second: 3.890e+05\r\nHead worker occupation: 21.7%\r\nProgress: 738 / 48000 total iterations (1.538%)\r\n==============================\r\nHall of Fame:\r\n-----------------------------------------\r\nComplexity  loss       Score     Equation\r\n1           1.093e-02  6.688e-01  y0\r\n3           5.800e-03  3.169e-01  (y0 + fi)\r\n4           5.637e-03  2.854e-02  (y0 + 0.07276265)\r\n6           4.774e-03  8.314e-02  (y0 + (ta * 0.002610847))\r\n8           4.435e-03  3.676e-02  (y0 + ((y0 * ta) * -0.002980318))\r\n10          4.297e-03  1.579e-02  (y0 + (((y0 * ta) * ta) * -9.228609e-5))\r\n12          4.256e-03  4.893e-03  (y0 + ((((y0 + fi) * ta) * ta) * -9.933137e-5))\r\n13          2.686e-03  4.603e-01  (((fi / (exp(exp(y0)) + y0)) * -3.892248) - 0.391965)\r\n14          2.422e-03  1.034e-01  ((fi / (exp(exp(y0)) + (y0 + fi))) * (7.6951604 / y0))\r\n16          2.417e-03  1.067e-03  ((fi / (exp(exp(y0)) + (y0 + fi))) * ((7.636825 / y0) - fi))\r\n17          2.388e-03  1.195e-02  (((fi / (exp(exp(y0)) + (y0 + fi))) * (8.030803 / y0)) - -0.038772658)\r\n19          2.388e-03  5.955e-08  (((fi / (exp(exp(y0)) + (y0 + fi))) * ((8.090776 - fi) / y0)) - -0.03876968)\r\n20          2.386e-03  7.479e-04  ((((fi / (exp(exp(y0)) + (y0 + fi))) * (8.086524 / y0)) + fi0) - (y0 * fa0))\r\n\r\n==============================\r\nPress 'q' and then <enter> to stop execution early.\r\n```\r\n**Some time later...**\r\n\r\n```python\r\nCycles per second: 5.570e+05\r\nHead worker occupation: 29.9%\r\nProgress: 19426 / 48000 total iterations (40.471%)\r\n==============================\r\nHall of Fame:\r\n-----------------------------------------\r\nComplexity  loss       Score     Equation\r\n1           1.093e-02  6.688e-01  y0\r\n3           5.800e-03  3.169e-01  (y0 + fi)\r\n4           5.637e-03  2.854e-02  (y0 + 0.07276349)\r\n6           4.774e-03  8.314e-02  (y0 + (ta * 0.0026107295))\r\n7           3.966e-03  1.853e-01  (exp(y0 * y0) * -0.3443256)\r\n11          2.273e-03  2.941e-01  ((exp(y0 * y0) * -0.70566094) + (y0 * y0))\r\n12          1.889e-03  1.854e-01  ((exp(y0 * y0) * (0.7411733 / y0)) + 1.0903764)\r\n13          1.884e-03  2.684e-03  ((exp(y0 / exp(y0 * y0)) * -7.5106072) - -4.2680764)\r\n14          1.316e-03  3.590e-01  ((((y0 / exp(y0 * y0)) * 8.164569) - -3.937509) / y0)\r\n16          1.242e-03  2.878e-02  (((((y0 / exp(y0 * y0)) * -10.644267) - 4.8561583) / y0) / y0)\r\n18          1.236e-03  2.518e-03  ((((y0 / exp(y0 * y0)) * -10.927609) - 5.0161552) / ((y0 * y0) + fi))\r\n20          1.230e-03  2.367e-03  ((((y0 / (exp(y0 * y0) + fa)) * -11.243925) - 5.1111484) / ((y0 * y0) + fi))\r\n\r\n==============================\r\nPress 'q' and then <enter> to stop execution early.\r\n[I 15:54:41.926 NotebookApp] Saving file at /Untitled.ipynb\r\n\r\n\r\n```\r\n**Additional context**\r\nRecently disabled multithreading to obtain significant speed increase.\r\nCompletely reinstalled python, pycharm and julia.\r\n",
        "comments": {
          "nodes": [
            {
              "author": {
                "login": "mtaylorDW"
              },
              "body": "**Some additional info:** All of the Julia worker processes remain in memory afterwards. Executing `model.fit(X,y)` again launches new worker processes while the old ones persist.  The 24 workers in my use case occupy about 400 MB each, meaning each time the fit process was restarted, about 10GB of additional memory would be occupied.  This can be worked around by stopping execution in the terminal with [q] [enter].",
              "createdAt": "2022-07-07T21:44:29Z"
            },
            {
              "author": {
                "login": "MilesCranmer"
              },
              "body": "Do you see the same issue when launching a Python script directly from terminal, or do you only see this in Jupyter?",
              "createdAt": "2022-07-07T21:52:57Z"
            },
            {
              "author": {
                "login": "mtaylorDW"
              },
              "body": "Just tested: same error (to my eyes)\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\user\\PycharmProjects\\pythonProject12\\main.py\", line 60, in <module>\r\n    model.fit(X,y)\r\n  File \"C:\\Users\\user\\PycharmProjects\\pythonProject12\\venv\\lib\\site-packages\\pysr\\sr.py\", line 1606, in fit\r\n    return self._run(X, y, mutated_params, weights=weights, seed=seed)\r\n  File \"C:\\Users\\user\\PycharmProjects\\pythonProject12\\venv\\lib\\site-packages\\pysr\\sr.py\", line 1469, in _run\r\n    self.raw_julia_state_ = Main.EquationSearch(\r\nRuntimeError: <PyCall.jlwrap (in a Julia function called from Python)\r\nJULIA: IOError: unlink(\"hall_of_fame_2022-07-07_170317.903.csv.bkup\"): resource busy or locked (EBUSY)\r\nStacktrace:\r\n  [1] uv_error\r\n    @ .\\libuv.jl:97 [inlined]\r\n  [2] unlink(p::String)\r\n    @ Base.Filesystem .\\file.jl:958\r\n  [3] rm(path::String; force::Bool, recursive::Bool)\r\n    @ Base.Filesystem .\\file.jl:276\r\n  [4] checkfor_mv_cp_cptree(src::String, dst::String, txt::String; force::Bool)\r\n    @ Base.Filesystem .\\file.jl:323\r\n  [5] cp(src::String, dst::String; force::Bool, follow_symlinks::Bool)\r\n    @ Base.Filesystem .\\file.jl:364\r\n  [6] _EquationSearch(::SymbolicRegression.CoreModule.ProgramConstantsModule.SRDistributed, datasets::Vector{SymbolicRegression.CoreModule.DatasetModule.Dataset{Float32}}; niterations::Int64, options::Options{Tuple{typeof(+), typeof(*), typeof(/), typeof(-)}, Tuple{typeof(exp)}, Nothing, Nothing, typeof(loss), Int64}, numprocs::Int64, procs::Nothing, runtests::Bool, saved_state::Nothing, addprocs_function::Nothing)\r\n    @ SymbolicRegression C:\\Users\\user\\.julia\\packages\\SymbolicRegression\\nlE1i\\src\\SymbolicRegression.jl:762\r\n  [7] EquationSearch(datasets::Vector{SymbolicRegression.CoreModule.DatasetModule.Dataset{Float32}}; niterations::Int64, options::Options{Tuple{typeof(+), typeof(*), typeof(/), typeof(-)}, Tuple{typeof(exp)}, Nothing, Nothing, typeof(loss), Int64}, numprocs::Int64, procs::Nothing, multithreading::Bool, runtests::Bool, saved_state::Nothing, addprocs_function::Nothing)\r\n    @ SymbolicRegression C:\\Users\\user\\.julia\\packages\\SymbolicRegression\\nlE1i\\src\\SymbolicRegression.jl:325\r\n  [8] EquationSearch(X::Matrix{Float32}, y::Matrix{Float32}; niterations::Int64, weights::Nothing, varMap::Vector{String}, options::Options{Tuple{typeof(+), typeof(*), typeof(/), typeof(-)}, Tuple{typeof(exp)}, Nothing, Nothing, typeof(loss), Int64}, numprocs::Int64, procs::Nothing, multithreading::Bool, runtests::Bool, saved_state::Nothing, addprocs_function::Nothing)\r\n    @ SymbolicRegression C:\\Users\\user\\.julia\\packages\\SymbolicRegression\\nlE1i\\src\\SymbolicRegression.jl:269\r\n  [9] #EquationSearch#21\r\n    @ C:\\Users\\user\\.julia\\packages\\SymbolicRegression\\nlE1i\\src\\SymbolicRegression.jl:294 [inlined]\r\n [10] invokelatest(::Any, ::Any, ::Vararg{Any}; kwargs::Base.Pairs{Symbol, Any, NTuple{8, Symbol}, NamedTuple{(:weights, :niterations, :varMap, :options, :numprocs, :multithreading, :saved_state, :addprocs_function), Tuple{Nothing, Int64, Vector{String}, Options{Tuple{typeof(+), typeof(*), typeof(/), typeof(-)}, Tuple{typeof(exp)}, Nothing, Nothing, typeof(loss), Int64}, Int64, Bool, Nothing, Nothing}}})\r\n    @ Base .\\essentials.jl:718\r\n [11] _pyjlwrap_call(f::Function, args_::Ptr{PyCall.PyObject_struct}, kw_::Ptr{PyCall.PyObject_struct})\r\n    @ PyCall C:\\Users\\user\\.julia\\packages\\PyCall\\7a7w0\\src\\callback.jl:32\r\n [12] pyjlwrap_call(self_::Ptr{PyCall.PyObject_struct}, args_::Ptr{PyCall.PyObject_struct}, kw_::Ptr{PyCall.PyObject_struct})\r\n    @ PyCall C:\\Users\\user\\.julia\\packages\\PyCall\\7a7w0\\src\\callback.jl:44>\r\n\r\nProcess finished with exit code 1\r\n```",
              "createdAt": "2022-07-07T22:07:17Z"
            },
            {
              "author": {
                "login": "MilesCranmer"
              },
              "body": "Thanks for running that.\r\n\r\nIt looks like this error has been seen by others copying files on windows from Julia: https://discourse.julialang.org/t/ioerror-unlink-resource-busy-or-locked-ebusy-in-windows/32045?u=milescranmer. I wonder what causes it in PySR... here is the [line the copy is called: ](\r\nhttps://github.com/MilesCranmer/SymbolicRegression.jl/blob/0055b3461616bc380c0e6dd1ab96103e866ae006/src/SymbolicRegression.jl#L764)\r\n```python\r\ncp(hofFile, hofFile * \".bkup\"; force=true)\r\n```\r\n(the syntax `hofFile * \".bkup\"` just means concatenate \".bkup\" with the filename)\r\n\r\nNothing seems to unusual about this line... I wonder if it wants me to remove the file first, before copying a new file to it?",
              "createdAt": "2022-07-07T22:18:11Z"
            },
            {
              "author": {
                "login": "mtaylorDW"
              },
              "body": "I'm thinking this may be a windows 11 mystery issue now - I've run the above code to 100% 3 times now and it didn't crash.  Ran it a 4th time and it did... \r\n\r\n If pysr / julia aren't locking the file and then trying to write to it, the collision must be with something else like the windows file system or built in security processes.  I have indexing turned off so it's not likely to be that.",
              "createdAt": "2022-07-07T22:46:35Z"
            },
            {
              "author": {
                "login": "MilesCranmer"
              },
              "body": "You said it happens randomly, correct? I wonder if it has to do with PyCharm trying to read the file since it is in your directory, and then PyCharm's read vs. Julia's write being in conflict.\r\n\r\nCan you try re-running but with `temp_equation_file=True`? This will save the equation file to a temporary folder, away from processes which might try to read it.",
              "createdAt": "2022-07-07T22:46:43Z"
            },
            {
              "author": {
                "login": "mtaylorDW"
              },
              "body": "Pycharm has a setting to \"ignore files\", which protects them from indexing... I wonder if this is the reason why.",
              "createdAt": "2022-07-07T23:07:14Z"
            },
            {
              "author": {
                "login": "mtaylorDW"
              },
              "body": "Running 3 hours now and seems totally stable.  Thanks @MilesCranmer , I really appreciate your help! (and pysr) 🙃 ",
              "createdAt": "2022-07-08T02:06:04Z"
            },
            {
              "author": {
                "login": "MilesCranmer"
              },
              "body": "Awesome! Glad to hear this fixed it. Just so I know the fix for future improvements, was it the `temp_equation_file`, or was it setting PyCharm to ignore files? \r\nHappy to hear you're enjoying PySR, please spread the word :)\r\n\r\nCheers,\r\nMiles",
              "createdAt": "2022-07-08T03:14:06Z"
            },
            {
              "author": {
                "login": "mtaylorDW"
              },
              "body": "`temp_equation_file=TRUE` did it.  I didn't test the ignore setting",
              "createdAt": "2022-07-08T13:44:47Z"
            },
            {
              "author": {
                "login": "MilesCranmer"
              },
              "body": "Awesome, thanks.",
              "createdAt": "2022-07-08T13:55:35Z"
            }
          ],
          "pageInfo": {
            "hasNextPage": false,
            "endCursor": "Y3Vyc29yOnYyOpHORkZkMw=="
          }
        }
      }
    }
  }
}