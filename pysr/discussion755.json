{
  "data": {
    "repository": {
      "discussion": {
        "number": 755,
        "title": "v1.0.0",
        "body": "# PySR v1.0.0 Release Notes\r\n\r\nPySR 1.0.0 introduces new features for imposing specific functional forms and finding parametric expressions. It also includes TensorBoard support, along with significant updates to the core algorithm, including some important bug fixes. The default hyperparameters have also been updated based on extensive tuning, with a maxsize of 30 rather than 20.\r\n\r\n## Major New Features\r\n\r\n### Expression Specifications\r\n\r\nPySR 1.0.0 introduces new ways to specify the structure of equations through \"Expression Specifications\", that expose the new backend feature of `AbstractExpression`:\r\n\r\n#### Template Expressions\r\n`TemplateExpressionSpec` allows you to define a specific structure for your equations. For example:\r\n\r\n```python\r\nexpression_spec = TemplateExpressionSpec(\r\n    function_symbols=[\"f\", \"g\"],\r\n    combine=\"((; f, g), (x1, x2, x3)) -> sin(f(x1, x2)) + g(x3)\"\r\n)\r\n```\r\n\r\n#### Parametric Expressions\r\n`ParametricExpressionSpec` enables fitting expressions that can adapt to different categories of data with per-category parameters:\r\n\r\n```python\r\nexpression_spec = ParametricExpressionSpec(max_parameters=2)\r\nmodel = PySRRegressor(\r\n    expression_spec=expression_spec\r\n    binary_operators=[\"+\", \"*\", \"-\", \"/\"],\r\n)\r\nmodel.fit(X, y, category=category)  # Pass category labels\r\n```\r\n\r\n### Improved Logging with TensorBoard\r\n\r\nThe new `TensorBoardLoggerSpec` enables logging of the search process, as well as hyperparameter recording, which exposes the `AbstractSRLogger` feature of the backend:\r\n\r\n```python\r\nlogger_spec = TensorBoardLoggerSpec(\r\n    log_dir=\"logs/run\",\r\n    log_interval=10,  # Log every 10 iterations\r\n)\r\nmodel = PySRRegressor(logger_spec=logger_spec)\r\n```\r\n\r\nFeatures logged include:\r\n\r\n- Loss curves over time at each complexity level\r\n- Population statistics\r\n- Pareto \"volume\" logging (measures performance over all complexities with a single scalar)\r\n- The min loss over time\r\n\r\n## Algorithm Improvements\r\n\r\n### Updated Default Parameters\r\n\r\nThe default hyperparameters have been significantly revised based on testing:\r\n\r\n- Increased default `maxsize` from 20 to 30, as I noticed that many people use the defaults, and this maxsize would allow for more accurate expressions.\r\n- New mutation operator weights optimized for better performance, along the new mutation \"rotate tree.\"\r\n- Improved search parameters tuned using Pareto front volume calculations.\r\n- Default `niterations` increased from 40 to 100, also to support better accuracy (at the expense of slightly longer default search times).\r\n\r\n### Core Changes\r\n\r\n- New output organization: Results are now stored in `outputs/<run_id>/` rather than in the directory of execution.\r\n- Improved performance with better parallelism handling\r\n- Support for Python 3.10+ \r\n- Updated Julia backend to version 1.10+\r\n- Fix for aliasing issues in crossover operations\r\n\r\n## Breaking Changes\r\n\r\n- Minimum Python version is now 3.10\r\n- Output file structure has changed to use directories\r\n- Parameter name updates:\r\n  - `equation_file` â†’ `output_directory` + `run_id`\r\n  - Added clearer naming for parallelism options, such as `parallelism=\"serial\"` rather than the old `multithreading=False, procs=0` which was unclear\r\n\r\n## Documentation\r\n\r\nThe documentation has a new home at https://ai.damtp.cam.ac.uk/pysr/\n\n<hr /><em>This discussion was created from the release <a href='https://github.com/MilesCranmer/PySR/releases/tag/v1.0.0'>v1.0.0</a>.</em>",
        "comments": {
          "nodes": [
            {
              "author": {
                "login": "GoldenGoldy"
              },
              "body": "Before I forget: congrats on releasing the new version! Great new features!\r\n\r\nMight it be though that v1.0.0 is not completely stable yet? I'm asking because I already had a job crash twice since the update, while I did not have such problems before. I didn't open a bug report for this yet because it's a bit difficult to say for sure whether it's due to PySR itself or Julia or something else.\r\n\r\nOne job crashed with this message, after about 5 hours:\r\n\r\n> juliacall.JuliaError: TaskFailedException\r\nStacktrace:\r\n  [1] wait(t::Task)\r\n    @ Base ./task.jl:370\r\n  [2] fetch\r\n    @ ./task.jl:390 [inlined]\r\n    ........................\r\n        nested task error: On worker 3:\r\n    DomainError with Inf:\r\n    sin(x) is only defined for finite x.\r\n    Stacktrace:\r\n      [1] sin_domain_error\r\n        @ ./special/trig.jl:28\r\n        ....................\r\n\r\nAnd a second job crashed with the following message, after about 11 hours:\r\n\r\n> juliacall.JuliaError: TaskFailedException\r\nStacktrace:\r\n  [1] wait(t::Task)\r\n    @ Base ./task.jl:370\r\n  [2] fetch\r\n    @ ./task.jl:390 [inlined]\r\n    .........................\r\n        nested task error: Distributed.ProcessExitedException(29)\r\n    Stacktrace:\r\n      [1] try_yieldto(undo::typeof(Base.ensure_rescheduled))\r\n        @ Base ./task.jl:958\r\n      [2] wait()\r\n        @ Base ./task.jl:1022\r\n        .......................\r\n        Worker 29 terminated.\r\nUNHANDLED TASK ERROR: IOError: read: connection reset by peer (ECONNRESET)\r\nStacktrace:\r\n  [1] wait_readnb(x::Sockets.TCPSocket, nb::Int64)\r\n    @ Base ./stream.jl:410\r\n  [2] (::Base.var\"#wait_locked#832\")(s::Sockets.TCPSocket, buf::IOBuffer, nb::Int64)\r\n    @ Base ./stream.jl:972\r\n    ......................\r\n\r\nIn both cases I was running in distributed mode (cluster_manager='slurm'), with 30 CPU cores. The Python script is the same as I was using with previous PySR versions (apart from required changes such as passing the parallelism parameter), when I didn't have these issues. Might it be due to the PySR update that these issues now occur? Or should I look at the environment? (Julia version and so on)\r\n    \r\n\r\n",
              "createdAt": "2024-12-02T20:08:02Z"
            }
          ],
          "pageInfo": {
            "hasNextPage": false,
            "endCursor": "Y3Vyc29yOnYyOpK5MjAyNC0xMi0wMlQyMDowODowMiswMDowMM4ArpJ1"
          }
        }
      }
    }
  }
}