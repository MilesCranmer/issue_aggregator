{
  "data": {
    "repository": {
      "issue": {
        "number": 938,
        "title": "[BUG]: TemplateExpressionSpec and loss_function_expression not compatible with multiprocessing",
        "body": "### What happened?\n\nCombining TemplateExpressionSpec and a custom loss function (`loss_function_expression`) doesn't work when running in the multiprocessing setting. It works fine when using multithreading, however. \n\n\n### Version\n\n1.5.8\n\n### Operating System\n\nmacOS\n\n### Package Manager\n\npip\n\n### Interface\n\nScript (i.e., `python my_script.py`)\n\n### Relevant log output\n\n```\n‚ùØ prp minimal_example.py\nCompiling Julia backend...\n[ Info: Automatically setting `--heap-size-hint=139M` on each Julia process. You can configure this with the `heap_size_hint_in_bytes` parameter.\n[ Info: Importing SymbolicRegression on workers.\n[ Info: Finished!\n[ Info: Copying definition of __sr_template_11363233297447453560 to workers...\n[ Info: Finished!\n[ Info: Copying definition of eval_loss to workers...\n[ Info: Finished!\nTraceback (most recent call last):\n  File \"/Users/isakbe/Dev/modelling/il-sr/il_sr/scripts/minimal_example.py\", line 52, in <module>\n  File \"/Users/isakbe/Dev/modelling/il-sr/il_sr/scripts/minimal_example.py\", line 43, in main\n    model.fit(x, y)\n  File \"/Users/isakbe/Library/Caches/pypoetry/virtualenvs/il-sr-9TFUWRsR-py3.11/lib/python3.11/site-packages/pysr/sr.py\", line 2318, in fit\n    self._run(X, y, runtime_params, weights=weights, seed=seed, category=category)\n  File \"/Users/isakbe/Library/Caches/pypoetry/virtualenvs/il-sr-9TFUWRsR-py3.11/lib/python3.11/site-packages/pysr/sr.py\", line 2109, in _run\n    out = SymbolicRegression.equation_search(\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/isakbe/.julia/packages/PythonCall/WMWY0/src/JlWrap/any.jl\", line 262, in __call__\n    return self._jl_callmethod($(pyjl_methodnum(pyjlany_call)), args, kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\njuliacall.JuliaError: On worker 2:\nMethodError: no method matching eval_loss(::TemplateExpression{Float32, TemplateStructure{(:f, :g), (), typeof(__sr_template_11363233297447453560), @NamedTuple{f::Int64, g::Int64}, @NamedTuple{}}, Node{Float32}, ComposableExpression{Float32, Node{Float32}, @NamedTuple{operators::OperatorEnum{Tuple{typeof(+), typeof(-), typeof(*), typeof(/), typeof(safe_pow)}, Tuple{}}, variable_names::Nothing, eval_options::EvalOptions{false, false, true, Nothing}}}, @NamedTuple{f::ComposableExpression{Float32, Node{Float32}, @NamedTuple{operators::OperatorEnum{Tuple{typeof(+), typeof(-), typeof(*), typeof(/), typeof(safe_pow)}, Tuple{}}, variable_names::Nothing, eval_options::EvalOptions{false, false, true, Nothing}}}, g::ComposableExpression{Float32, Node{Float32}, @NamedTuple{operators::OperatorEnum{Tuple{typeof(+), typeof(-), typeof(*), typeof(/), typeof(safe_pow)}, Tuple{}}, variable_names::Nothing, eval_options::EvalOptions{false, false, true, Nothing}}}}, @NamedTuple{structure::TemplateStructure{(:f, :g), (), typeof(__sr_template_11363233297447453560), @NamedTuple{f::Int64, g::Int64}, @NamedTuple{}}, operators::OperatorEnum{Tuple{typeof(+), typeof(-), typeof(*), typeof(/), typeof(safe_pow)}, Tuple{}}, variable_names::Nothing, parameters::@NamedTuple{}}}, ::SymbolicRegression.CoreModule.DatasetModule.BasicDataset{Float32, Float32, Matrix{Float32}, Vector{Float32}, Nothing, @NamedTuple{}, Nothing, Nothing, Nothing, Nothing}, ::Options{SymbolicRegression.CoreModule.OptionsStructModule.ComplexityMapping{Int64, Int64}, OperatorEnum{Tuple{typeof(+), typeof(-), typeof(*), typeof(/), typeof(safe_pow)}, Tuple{}}, Node, TemplateExpression, @NamedTuple{structure::TemplateStructure{(:f, :g), (), typeof(__sr_template_11363233297447453560), @NamedTuple{f::Int64, g::Int64}, @NamedTuple{}}}, MutationWeights, false, false, nothing, Nothing, 5})\n\nClosest candidates are:\n  eval_loss(::Any, ::Dataset{T, L}, ::Any, !Matched::Any) where {T, L} (method too new to be called from this world context.)\n   @ Main none:2\n\nStacktrace:\n [1] #12\n   @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/macros.jl:83\n [2] #invokelatest#2\n   @ ./essentials.jl:892 [inlined]\n [3] invokelatest\n   @ ./essentials.jl:889\n [4] #107\n   @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/process_messages.jl:283\n [5] run_work_thunk\n   @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/process_messages.jl:70\n [6] run_work_thunk\n   @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/process_messages.jl:79\n [7] #100\n   @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/process_messages.jl:88\nStacktrace:\n  [1] remotecall_fetch(f::Function, w::Distributed.Worker, args::Distributed.RRID; kwargs::@Kwargs{})\n    @ Distributed /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/remotecall.jl:465\n  [2] remotecall_fetch(f::Function, w::Distributed.Worker, args::Distributed.RRID)\n    @ Distributed /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/remotecall.jl:454\n  [3] remotecall_fetch\n    @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/remotecall.jl:492 [inlined]\n  [4] call_on_owner\n    @ /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/remotecall.jl:565 [inlined]\n  [5] fetch(r::Distributed.Future)\n    @ Distributed /opt/homebrew/Cellar/julia/1.10.4/share/julia/stdlib/v1.10/Distributed/src/remotecall.jl:619\n  [6] test_function_on_workers(example_inputs::Tuple{TemplateExpression{Float32, TemplateStructure{(:f, :g), (), typeof(__sr_template_11363233297447453560), @NamedTuple{f::Int64, g::Int64}, @NamedTuple{}}, Node{Float32}, ComposableExpression{Float32, Node{Float32}, @NamedTuple{operators::OperatorEnum{Tuple{typeof(+), typeof(-), typeof(*), typeof(/), typeof(safe_pow)}, Tuple{}}, variable_names::Nothing, eval_options::EvalOptions{false, false, true, Nothing}}}, @NamedTuple{f::ComposableExpression{Float32, Node{Float32}, @NamedTuple{operators::OperatorEnum{Tuple{typeof(+), typeof(-), typeof(*), typeof(/), typeof(safe_pow)}, Tuple{}}, variable_names::Nothing, eval_options::EvalOptions{false, false, true, Nothing}}}, g::ComposableExpression{Float32, Node{Float32}, @NamedTuple{operators::OperatorEnum{Tuple{typeof(+), typeof(-), typeof(*), typeof(/), typeof(safe_pow)}, Tuple{}}, variable_names::Nothing, eval_options::EvalOptions{false, false, true, Nothing}}}}, @NamedTuple{structure::TemplateStructure{(:f, :g), (), typeof(__sr_template_11363233297447453560), @NamedTuple{f::Int64, g::Int64}, @NamedTuple{}}, operators::OperatorEnum{Tuple{typeof(+), typeof(-), typeof(*), typeof(/), typeof(safe_pow)}, Tuple{}}, variable_names::Nothing, parameters::@NamedTuple{}}}, SymbolicRegression.CoreModule.DatasetModule.BasicDataset{Float32, Float32, Matrix{Float32}, Vector{Float32}, Nothing, @NamedTuple{}, Nothing, Nothing, Nothing, Nothing}, Options{SymbolicRegression.CoreModule.OptionsStructModule.ComplexityMapping{Int64, Int64}, OperatorEnum{Tuple{typeof(+), typeof(-), typeof(*), typeof(/), typeof(safe_pow)}, Tuple{}}, Node, TemplateExpression, @NamedTuple{structure::TemplateStructure{(:f, :g), (), typeof(__sr_template_11363233297447453560), @NamedTuple{f::Int64, g::Int64}, @NamedTuple{}}}, MutationWeights, false, false, nothing, Nothing, 5}}, op::Function, procs::Vector{Int64})\n    @ SymbolicRegression ~/.julia/packages/SymbolicRegression/MdISO/src/Configure.jl:237\n  [7] move_functions_to_workers(procs::Vector{Int64}, options::Options{SymbolicRegression.CoreModule.OptionsStructModule.ComplexityMapping{Int64, Int64}, OperatorEnum{Tuple{typeof(+), typeof(-), typeof(*), typeof(/), typeof(safe_pow)}, Tuple{}}, Node, TemplateExpression, @NamedTuple{structure::TemplateStructure{(:f, :g), (), typeof(__sr_template_11363233297447453560), @NamedTuple{f::Int64, g::Int64}, @NamedTuple{}}}, MutationWeights, false, false, nothing, Nothing, 5}, dataset::SymbolicRegression.CoreModule.DatasetModule.BasicDataset{Float32, Float32, Matrix{Float32}, Vector{Float32}, Nothing, @NamedTuple{}, Nothing, Nothing, Nothing, Nothing}, verbosity::Int64)\n    @ SymbolicRegression ~/.julia/packages/SymbolicRegression/MdISO/src/Configure.jl:211\n  [8] configure_workers(; procs::Nothing, numprocs::Int64, addprocs_function::typeof(Distributed.addprocs), options::Options{SymbolicRegression.CoreModule.OptionsStructModule.ComplexityMapping{Int64, Int64}, OperatorEnum{Tuple{typeof(+), typeof(-), typeof(*), typeof(/), typeof(safe_pow)}, Tuple{}}, Node, TemplateExpression, @NamedTuple{structure::TemplateStructure{(:f, :g), (), typeof(__sr_template_11363233297447453560), @NamedTuple{f::Int64, g::Int64}, @NamedTuple{}}}, MutationWeights, false, false, nothing, Nothing, 5}, worker_imports::Union{Nothing, Vector{Symbol}}, project_path::String, file::String, exeflags::Cmd, verbosity::Int64, example_dataset::SymbolicRegression.CoreModule.DatasetModule.BasicDataset{Float32, Float32, Matrix{Float32}, Vector{Float32}, Nothing, @NamedTuple{}, Nothing, Nothing, Nothing, Nothing}, runtests::Bool)\n    @ SymbolicRegression ~/.julia/packages/SymbolicRegression/MdISO/src/Configure.jl:389\n  [9] _create_workers(datasets::Vector{SymbolicRegression.CoreModule.DatasetModule.BasicDataset{Float32, Float32, Matrix{Float32}, Vector{Float32}, Nothing, @NamedTuple{}, Nothing, Nothing, Nothing, Nothing}}, ropt::SymbolicRegression.SearchUtilsModule.RuntimeOptions{:multiprocessing, 1, true, Nothing}, options::Options{SymbolicRegression.CoreModule.OptionsStructModule.ComplexityMapping{Int64, Int64}, OperatorEnum{Tuple{typeof(+), typeof(-), typeof(*), typeof(/), typeof(safe_pow)}, Tuple{}}, Node, TemplateExpression, @NamedTuple{structure::TemplateStructure{(:f, :g), (), typeof(__sr_template_11363233297447453560), @NamedTuple{f::Int64, g::Int64}, @NamedTuple{}}}, MutationWeights, false, false, nothing, Nothing, 5})\n    @ SymbolicRegression ~/.julia/packages/SymbolicRegression/MdISO/src/SymbolicRegression.jl:633\n [10] _equation_search(datasets::Vector{SymbolicRegression.CoreModule.DatasetModule.BasicDataset{Float32, Float32, Matrix{Float32}, Vector{Float32}, Nothing, @NamedTuple{}, Nothing, Nothing, Nothing, Nothing}}, ropt::SymbolicRegression.SearchUtilsModule.RuntimeOptions{:multiprocessing, 1, true, Nothing}, options::Options{SymbolicRegression.CoreModule.OptionsStructModule.ComplexityMapping{Int64, Int64}, OperatorEnum{Tuple{typeof(+), typeof(-), typeof(*), typeof(/), typeof(safe_pow)}, Tuple{}}, Node, TemplateExpression, @NamedTuple{structure::TemplateStructure{(:f, :g), (), typeof(__sr_template_11363233297447453560), @NamedTuple{f::Int64, g::Int64}, @NamedTuple{}}}, MutationWeights, false, false, nothing, Nothing, 5}, saved_state::Nothing)\n    @ SymbolicRegression ~/.julia/packages/SymbolicRegression/MdISO/src/SymbolicRegression.jl:568\n [11] equation_search(datasets::Vector{SymbolicRegression.CoreModule.DatasetModule.BasicDataset{Float32, Float32, Matrix{Float32}, Vector{Float32}, Nothing, @NamedTuple{}, Nothing, Nothing, Nothing, Nothing}}; options::Options{SymbolicRegression.CoreModule.OptionsStructModule.ComplexityMapping{Int64, Int64}, OperatorEnum{Tuple{typeof(+), typeof(-), typeof(*), typeof(/), typeof(safe_pow)}, Tuple{}}, Node, TemplateExpression, @NamedTuple{structure::TemplateStructure{(:f, :g), (), typeof(__sr_template_11363233297447453560), @NamedTuple{f::Int64, g::Int64}, @NamedTuple{}}}, MutationWeights, false, false, nothing, Nothing, 5}, saved_state::Nothing, runtime_options::Nothing, runtime_options_kws::@Kwargs{niterations::Int64, parallelism::String, numprocs::Int64, procs::Nothing, addprocs_function::Nothing, heap_size_hint_in_bytes::Nothing, worker_imports::Nothing, runtests::Bool, return_state::Bool, run_id::String, verbosity::Int64, logger::Nothing, progress::Bool, v_dim_out::Val{1}})\n    @ SymbolicRegression ~/.julia/packages/SymbolicRegression/MdISO/src/SymbolicRegression.jl:561\n [12] equation_search\n    @ ~/.julia/packages/SymbolicRegression/MdISO/src/SymbolicRegression.jl:542 [inlined]\n [13] #equation_search#23\n    @ ~/.julia/packages/SymbolicRegression/MdISO/src/SymbolicRegression.jl:511 [inlined]\n [14] equation_search\n    @ ~/.julia/packages/SymbolicRegression/MdISO/src/SymbolicRegression.jl:456 [inlined]\n [15] #equation_search#24\n    @ ~/.julia/packages/SymbolicRegression/MdISO/src/SymbolicRegression.jl:535 [inlined]\n [16] pyjlany_call(self::typeof(equation_search), args_::Py, kwargs_::Py)\n    @ PythonCall.JlWrap ~/.julia/packages/PythonCall/WMWY0/src/JlWrap/any.jl:44\n [17] _pyjl_callmethod(f::Any, self_::Ptr{PythonCall.C.PyObject}, args_::Ptr{PythonCall.C.PyObject}, nargs::Int64)\n    @ PythonCall.JlWrap ~/.julia/packages/PythonCall/WMWY0/src/JlWrap/base.jl:73\n [18] _pyjl_callmethod(o::Ptr{PythonCall.C.PyObject}, args::Ptr{PythonCall.C.PyObject})\n    @ PythonCall.JlWrap.Cjl ~/.julia/packages/PythonCall/WMWY0/src/JlWrap/C.jl:63\n```\n\n### Extra Info\n\nA minimal example:\n\n```\nfrom pysr import PySRRegressor, TemplateExpressionSpec\nimport numpy as np\nfrom sklearn.metrics import r2_score\n\ndef main():\n\n    x = np.random.uniform(low=[-1, 3, 10], high=[6, 10, 100], size=(100, 3))\n    y = np.sin(x[:, 0] - x[:, 2] ** 3) * np.exp(x[:, 1] / 5 + x[:, 0]) \n    \n    template = TemplateExpressionSpec(\n        expressions=[\"f\", \"g\"],\n        combine=\"sin(f(x1, x3)) * exp(g(x1, x2))\",\n        variable_names=[\"x1\", \"x2\", \"x3\"]\n    )\n\n    loss = \"\"\" \n        using Statistics\n        function eval_loss(tree, dataset::Dataset{T,L}, options, idx)::L where {T,L}\n\n            x = idx === nothing ? dataset.X : view(dataset.X, :, idx)\n            y = idx === nothing ? dataset.y : view(dataset.y, idx)\n            \n            prediction, flag = eval_tree_array(tree, x, options)\n\n            if !flag\n                return L(Inf)\n            end\n            \n            errors = (prediction .- y) .^2\n            return mean(errors)\n        end\n    \"\"\"\n\n    model = PySRRegressor(\n        binary_operators=[\"+\", \"-\", \"*\", \"/\", \"^\"],\n        constraints={\"^\": (1, 9)},\n        expression_spec=template,\n        parallelism=\"multiprocessing\",\n        loss_function_expression=loss,\n    )\n\n    \n    model.fit(x, y)\n    \n    preds = model.predict(x)\n    score = r2_score(y, preds)\n    print(score)\n\nif __name__ == \"__main__\":\n    main()\n```",
        "comments": {
          "nodes": [
            {
              "author": {
                "login": "MilesCranmer"
              },
              "body": "Ah. This error is not due to multiprocessing. It's actually due to a couple unrelated issues:\n\n1.  You need to chose a new function name. `eval_loss` is already used as the internal name, and this appears to be overwriting it somehow (I think)\n2. It needs to have a 3-arg version available. You should declare it with `idx=nothing` rather than just `idx`. \n\nYou can fix it with the following patch:\n\n```diff\n- function eval_loss(tree, dataset::Dataset{T,L}, options, idx)::L where {T,L}\n+ function my_custom_loss(tree, dataset::Dataset{T,L}, options, idx=nothing)::L where {T,L}\n```\n\nAlso, in the latest PySR/SymbolicRegression.jl, you don't need the `idx` argument at all, it will do this all automatically for you. So you could actually use the following patch instead of the above one:\n\n\n```diff\n- function eval_loss(tree, dataset::Dataset{T,L}, options, idx)::L where {T,L}\n+ function my_custom_loss(tree, dataset::Dataset{T,L}, options)::L where {T,L}\n\n-     x = idx === nothing ? dataset.X : view(dataset.X, :, idx)\n-     y = idx === nothing ? dataset.y : view(dataset.y, idx)\n+     x = dataset.X\n+     y = dataset.y\n      \n      prediction, flag = eval_tree_array(tree, x, options)\n\n      if !flag\n          return L(Inf)\n      end\n      \n      errors = (prediction .- y) .^2\n      return mean(errors)\n  end\n```\n\n",
              "createdAt": "2025-05-23T11:05:28Z"
            }
          ],
          "pageInfo": {
            "hasNextPage": false,
            "endCursor": "Y3Vyc29yOnYyOpHOrRizvA=="
          }
        }
      }
    }
  }
}