{
  "data": {
    "repository": {
      "issue": {
        "number": 775,
        "title": "New scikit-learn tests failing",
        "body": "Looks like there are some newly added scikit-learn tests. Some of them are failing:\r\n\r\n```python\r\nFailed check_do_not_raise_errors_in_init_or_set_params with:\r\n    Traceback (most recent call last):\r\n      File \"/home/runner/miniconda3/envs/pysr-test/lib/python3.10/site-packages/pysr/test/test_main.py\", line 885, in test_scikit_learn_compatibility\r\n        check(model)\r\n      File \"/home/runner/miniconda3/envs/pysr-test/lib/python3.10/site-packages/sklearn/utils/estimator_checks.py\", line 5221, in check_do_not_raise_errors_in_init_or_set_params\r\n        est = Estimator(**new_params)\r\n      File \"/home/runner/miniconda3/envs/pysr-test/lib/python3.10/site-packages/pysr/sr.py\", line 1024, in __init__\r\n        raise TypeError(err_msg)\r\n    TypeError: `kwargs` is not a valid keyword argument for PySRRegressor.\r\n    \r\nFailed check_n_features_in_after_fitting with:\r\n    Traceback (most recent call last):\r\n      File \"/home/runner/miniconda3/envs/pysr-test/lib/python3.10/site-packages/sklearn/utils/estimator_checks.py\", line 4410, in check_n_features_in_after_fitting\r\n        callable_method(X_bad)\r\n      File \"/home/runner/miniconda3/envs/pysr-test/lib/python3.10/site-packages/pysr/sr.py\", line 2336, in predict\r\n        X.columns = self.feature_names_in_\r\n      File \"/home/runner/miniconda3/envs/pysr-test/lib/python3.10/site-packages/pandas/core/generic.py\", line 6313, in __setattr__\r\n        return object.__setattr__(self, name, value)\r\n      File \"properties.pyx\", line 69, in pandas._libs.properties.AxisProperty.__set__\r\n      File \"/home/runner/miniconda3/envs/pysr-test/lib/python3.10/site-packages/pandas/core/generic.py\", line 814, in _set_axis\r\n        self._mgr.set_axis(axis, labels)\r\n      File \"/home/runner/miniconda3/envs/pysr-test/lib/python3.10/site-packages/pandas/core/internals/managers.py\", line 238, in set_axis\r\n        self._validate_set_axis(axis, new_labels)\r\n      File \"/home/runner/miniconda3/envs/pysr-test/lib/python3.10/site-packages/pandas/core/internals/base.py\", line 98, in _validate_set_axis\r\n        raise ValueError(\r\n    ValueError: Length mismatch: Expected axis has 1 elements, new values have 4 elements\r\n    \r\n    The above exception was the direct cause of the following exception:\r\n    \r\n    Traceback (most recent call last):\r\n      File \"/home/runner/miniconda3/envs/pysr-test/lib/python3.10/site-packages/pysr/test/test_main.py\", line 885, in test_scikit_learn_compatibility\r\n        check(model)\r\n      File \"/home/runner/miniconda3/envs/pysr-test/lib/python3.10/site-packages/sklearn/utils/_testing.py\", line 147, in wrapper\r\n        return fn(*args, **kwargs)\r\n      File \"/home/runner/miniconda3/envs/pysr-test/lib/python3.10/site-packages/sklearn/utils/estimator_checks.py\", line 4407, in check_n_features_in_after_fitting\r\n        with raises(\r\n      File \"/home/runner/miniconda3/envs/pysr-test/lib/python3.10/site-packages/sklearn/utils/_testing.py\", line 1114, in __exit__\r\n        raise AssertionError(err_msg) from exc_value\r\n    AssertionError: `PySRRegressor.predict()` does not check for consistency between input number\r\n    of features with PySRRegressor.fit(), via the `n_features_in_` attribute.\r\n    You might want to use `sklearn.utils.validation.validate_data` instead\r\n    of `check_array` in `PySRRegressor.fit()` and PySRRegressor.predict()`. This can be done\r\n    like the following:\r\n    from sklearn.utils.validation import validate_data\r\n    ...\r\n    class MyEstimator(BaseEstimator):\r\n        ...\r\n        def fit(self, X, y):\r\n            X, y = validate_data(self, X, y, ...)\r\n            ...\r\n            return self\r\n        ...\r\n        def predict(self, X):\r\n            X = validate_data(self, X, ..., reset=False)\r\n            ...\r\n        return X\r\n```\r\n\r\nI think I will disable the `check_do_not_raise_errors_in_init_or_set_params` test because I think the deprecation errors are more helpful than just throwing a naked error. Maybe sklearn means we should throw these errors during `fit` rather than `__init__`? But in that case I'm not sure how to store the `kwargs`.",
        "comments": {
          "nodes": [],
          "pageInfo": {
            "hasNextPage": false,
            "endCursor": null
          }
        }
      }
    }
  }
}