{
  "data": {
    "repository": {
      "discussion": {
        "number": 361,
        "title": "`UndefVarError` with custom objective",
        "body": "When I call\r\n\"model.fit(X, y)\".\r\nI get this JuliaError error:\r\nJuliaError: Exception 'UndefVarError: `Dataset` not defined' occurred while calling julia code:\r\n```\r\nfunction eval_loss(tree, dataset::Dataset{T,L}, options)::L where {T,L}\r\n    # Evaluate numerator:\r\n\r\n    prediction, flag = eval_tree_array(tree, my_dataset_X, options)\r\n    !flag && return L(Inf)\r\n    \r\n    num_rectangles = 200\r\n    \r\n    # You make sure that this object is of type Matrix, not Vector and not Array.\r\n    evenly_spaced_numbers = reshape([LinRange(0, 1, num_rectangles + 1);], 1, num_rectangles + 1)\r\n    \r\n    \r\n    \r\n    prediction_on_evenly_spaced_numbers, flag_on_evenly_spaced_numbers = eval_tree_array(tree, evenly_spaced_numbers, options)\r\n    \r\n    prediction_on_evenly_spaced_numbers = prediction_on_evenly_spaced_numbers .* prediction_on_evenly_spaced_numbers\r\n    \r\n\r\n    norm_constant = 0\r\n    prev_expr_val = -1\r\n    for i in 0:num_rectangles\r\n        cur_expr_val = prediction_on_evenly_spaced_numbers[i+1]\r\n        \r\n        if (i > 0)\r\n            cur_trapezoid_area = (cur_expr_val + prev_expr_val) / (2.0 * num_rectangles)\r\n            norm_constant += cur_trapezoid_area\r\n        end\r\n        \r\n        prev_expr_val = cur_expr_val\r\n    end\r\n    \r\n    actual_probs = (prediction .* prediction) / norm_constant\r\n    \r\n    # println(\"HELLO WORLD\")\r\n    \r\n    # length(actual_probs) equals length(prediction)\r\n    return exp(-1 * sum(log.(actual_probs)) / (length(prediction)))\r\nend\r\n\r\n```\r\n\r\nBELOW IS REFERENCE FOR WHAT I HAD DONE BEFORE I CALLED model.fit(X, y):\r\nBefore I called model.fit(X, y), I had done:\r\n\"\r\nimport pysr\r\nfrom pysr import PySRRegressor\r\n\"\r\n\r\n\r\n\r\nMy objective and model are defined by this code:\r\n```\r\n\r\nobjective = \"\"\"\r\nfunction eval_loss(tree, dataset::Dataset{T,L}, options)::L where {T,L}\r\n    # Evaluate numerator:\r\n\r\n    prediction, flag = eval_tree_array(tree, my_dataset_X, options)\r\n    !flag && return L(Inf)\r\n    \r\n    num_rectangles = 200\r\n    \r\n    # You make sure that this object is of type Matrix, not Vector and not Array.\r\n    evenly_spaced_numbers = reshape([LinRange(0, 1, num_rectangles + 1);], 1, num_rectangles + 1)\r\n    \r\n    \r\n    \r\n    prediction_on_evenly_spaced_numbers, flag_on_evenly_spaced_numbers = eval_tree_array(tree, evenly_spaced_numbers, options)\r\n    \r\n    prediction_on_evenly_spaced_numbers = prediction_on_evenly_spaced_numbers .* prediction_on_evenly_spaced_numbers\r\n    \r\n\r\n    norm_constant = 0\r\n    prev_expr_val = -1\r\n    for i in 0:num_rectangles\r\n        cur_expr_val = prediction_on_evenly_spaced_numbers[i+1]\r\n        \r\n        if (i > 0)\r\n            cur_trapezoid_area = (cur_expr_val + prev_expr_val) / (2.0 * num_rectangles)\r\n            norm_constant += cur_trapezoid_area\r\n        end\r\n        \r\n        prev_expr_val = cur_expr_val\r\n    end\r\n    \r\n    actual_probs = (prediction .* prediction) / norm_constant\r\n    \r\n    # println(\"HELLO WORLD\")\r\n    \r\n    # length(actual_probs) equals length(prediction)\r\n    return exp(-1 * sum(log.(actual_probs)) / (length(prediction)))\r\nend\r\n\"\"\"\r\n\r\n# return -1 * sum(log.(prediction.*prediction)) / length(prediction)\r\n\r\nmodel = PySRRegressor(\r\n    niterations=40,  # < Increase me for better results\r\n    binary_operators=[\"+\", \"*\", \"-\", \"/\"],\r\n    unary_operators=[\r\n        \"cos\",\r\n        \"exp\",\r\n        \"sin\",\r\n        \"inv(x) = 1/x\",\r\n        # ^ Custom operator (julia syntax)\r\n    ],\r\n    extra_sympy_mappings={\"inv\": lambda x: 1 / x},\r\n    # ^ Define operator for SymPy as well\r\n    #loss=\"loss(prediction, target) = (prediction - target)^2\",\r\n    full_objective=objective\r\n    # ^ Custom loss function (julia syntax)\r\n)\r\n```\r\n\r\nAnd my dataset X and y are defined by:\r\n```\r\nX = np.random.rand(100, 1)\r\nnum_points = X.shape[0] # num_points is 100\r\ny = 1000 * np.ones(num_points)\r\n```\r\n",
        "comments": {
          "nodes": [
            {
              "author": {
                "login": "MilesCranmer"
              },
              "body": "In\r\n\r\n```julia\r\nfunction eval_loss(tree, dataset::Dataset{T,L}, options)::L where {T,L}\r\n    # Evaluate numerator:\r\n\r\n    prediction, flag = eval_tree_array(tree, my_dataset_X, options)\r\n```\r\n\r\nwhat is `my_dataset_X`? That looks like the cause.",
              "createdAt": "2023-07-01T01:20:51Z"
            }
          ],
          "pageInfo": {
            "hasNextPage": false,
            "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0wNy0wMVQwMjoyMDo1MSswMTowMM4AYJdu"
          }
        }
      }
    }
  }
}