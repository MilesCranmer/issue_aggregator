{
  "data": {
    "repository": {
      "discussion": {
        "number": 669,
        "title": "ValueError: Expression (loss) <= (5.050614450000001e-13) has forbidden control characters. when loss is very low, occur the error, how can i solve it?",
        "body": "when I run the demo\r\n```python\r\n# Learn equations\r\nmodel = PySRRegressor(\r\n    niterations=30,\r\n    binary_operators=[\"+\", \"*\"],\r\n    unary_operators=[\"cos\", \"exp\", \"sin\"],\r\n    early_stop_condition=(\r\n        \"stop_if(loss, complexity) = loss < 1e-10 && complexity < 12\"\r\n        # Stop early if we find a good and simple equation\r\n    ),\r\n    **default_pysr_params,\r\n)\r\n\r\nmodel.fit(X, y)\r\n```\r\nit seems the loas is lower than some threshould, but i don not know how to solve it\r\n```python\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\nFile D:\\ProgramData\\Anaconda3\\envs\\qlib\\lib\\site-packages\\IPython\\core\\formatters.py:974, in MimeBundleFormatter.__call__(self, obj, include, exclude)\r\n    971     method = get_real_method(obj, self.print_method)\r\n    973     if method is not None:\r\n--> 974         return method(include=include, exclude=exclude)\r\n    975     return None\r\n    976 else:\r\n\r\nFile D:\\ProgramData\\Anaconda3\\envs\\qlib\\lib\\site-packages\\sklearn\\base.py:669, in BaseEstimator._repr_mimebundle_(self, **kwargs)\r\n    667 def _repr_mimebundle_(self, **kwargs):\r\n    668     \"\"\"Mime bundle used by jupyter kernels to display estimator\"\"\"\r\n--> 669     output = {\"text/plain\": repr(self)}\r\n    670     if get_config()[\"display\"] == \"diagram\":\r\n    671         output[\"text/html\"] = estimator_html_repr(self)\r\n\r\nFile D:\\ProgramData\\Anaconda3\\envs\\qlib\\lib\\site-packages\\pysr\\sr.py:1082, in PySRRegressor.__repr__(self)\r\n   1080 for i, equations in enumerate(all_equations):\r\n   1081     selected = pd.Series([\"\"] * len(equations), index=equations.index)\r\n-> 1082     chosen_row = idx_model_selection(equations, self.model_selection)\r\n   1083     selected[chosen_row] = \">>>>\"\r\n   1084     repr_equations = pd.DataFrame(\r\n   1085         dict(\r\n   1086             pick=selected,\r\n   (...)\r\n   1091         )\r\n   1092     )\r\n\r\nFile D:\\ProgramData\\Anaconda3\\envs\\qlib\\lib\\site-packages\\pysr\\sr.py:2559, in idx_model_selection(equations, model_selection)\r\n   2557 elif model_selection == \"best\":\r\n   2558     threshold = 1.5 * equations[\"loss\"].min()\r\n-> 2559     filtered_equations = equations.query(f\"loss <= {threshold}\")\r\n   2560     chosen_idx = filtered_equations[\"score\"].idxmax()\r\n   2561 elif model_selection == \"score\":\r\n\r\nFile D:\\ProgramData\\Anaconda3\\envs\\qlib\\lib\\site-packages\\pandas\\util\\_decorators.py:331, in deprecate_nonkeyword_arguments.<locals>.decorate.<locals>.wrapper(*args, **kwargs)\r\n    325 if len(args) > num_allow_args:\r\n    326     warnings.warn(\r\n    327         msg.format(arguments=_format_argument_list(allow_args)),\r\n    328         FutureWarning,\r\n    329         stacklevel=find_stack_level(),\r\n    330     )\r\n--> 331 return func(*args, **kwargs)\r\n\r\nFile D:\\ProgramData\\Anaconda3\\envs\\qlib\\lib\\site-packages\\pandas\\core\\frame.py:4474, in DataFrame.query(self, expr, inplace, **kwargs)\r\n   4472 kwargs[\"level\"] = kwargs.pop(\"level\", 0) + 2\r\n   4473 kwargs[\"target\"] = None\r\n-> 4474 res = self.eval(expr, **kwargs)\r\n   4476 try:\r\n   4477     result = self.loc[res]\r\n\r\nFile D:\\ProgramData\\Anaconda3\\envs\\qlib\\lib\\site-packages\\pandas\\util\\_decorators.py:331, in deprecate_nonkeyword_arguments.<locals>.decorate.<locals>.wrapper(*args, **kwargs)\r\n    325 if len(args) > num_allow_args:\r\n    326     warnings.warn(\r\n    327         msg.format(arguments=_format_argument_list(allow_args)),\r\n    328         FutureWarning,\r\n    329         stacklevel=find_stack_level(),\r\n    330     )\r\n--> 331 return func(*args, **kwargs)\r\n\r\nFile D:\\ProgramData\\Anaconda3\\envs\\qlib\\lib\\site-packages\\pandas\\core\\frame.py:4612, in DataFrame.eval(self, expr, inplace, **kwargs)\r\n   4609     kwargs[\"target\"] = self\r\n   4610 kwargs[\"resolvers\"] = tuple(kwargs.get(\"resolvers\", ())) + resolvers\r\n-> 4612 return _eval(expr, inplace=inplace, **kwargs)\r\n\r\nFile D:\\ProgramData\\Anaconda3\\envs\\qlib\\lib\\site-packages\\pandas\\core\\computation\\eval.py:358, in eval(expr, parser, engine, truediv, local_dict, global_dict, resolvers, level, target, inplace)\r\n    356 eng = ENGINES[engine]\r\n    357 eng_inst = eng(parsed_expr)\r\n--> 358 ret = eng_inst.evaluate()\r\n    360 if parsed_expr.assigner is None:\r\n    361     if multi_line:\r\n\r\nFile D:\\ProgramData\\Anaconda3\\envs\\qlib\\lib\\site-packages\\pandas\\core\\computation\\engines.py:81, in AbstractEngine.evaluate(self)\r\n     78     self.result_type, self.aligned_axes = align_terms(self.expr.terms)\r\n     80 # make sure no names in resolvers and locals/globals clash\r\n---> 81 res = self._evaluate()\r\n     82 return reconstruct_object(\r\n     83     self.result_type, res, self.aligned_axes, self.expr.terms.return_type\r\n     84 )\r\n\r\nFile D:\\ProgramData\\Anaconda3\\envs\\qlib\\lib\\site-packages\\pandas\\core\\computation\\engines.py:122, in NumExprEngine._evaluate(self)\r\n    120 scope = env.full_scope\r\n    121 _check_ne_builtin_clash(self.expr)\r\n--> 122 return ne.evaluate(s, local_dict=scope)\r\n\r\nFile D:\\ProgramData\\Anaconda3\\envs\\qlib\\lib\\site-packages\\numexpr\\necompiler.py:975, in evaluate(ex, local_dict, global_dict, out, order, casting, sanitize, _frame_depth, **kwargs)\r\n    973     return re_evaluate(local_dict=local_dict, _frame_depth=_frame_depth)\r\n    974 else:\r\n--> 975     raise e\r\n\r\nFile D:\\ProgramData\\Anaconda3\\envs\\qlib\\lib\\site-packages\\numexpr\\necompiler.py:872, in validate(ex, local_dict, global_dict, out, order, casting, _frame_depth, sanitize, **kwargs)\r\n    870 expr_key = (ex, tuple(sorted(context.items())))\r\n    871 if expr_key not in _names_cache:\r\n--> 872     _names_cache[expr_key] = getExprNames(ex, context, sanitize=sanitize)\r\n    873 names, ex_uses_vml = _names_cache[expr_key]\r\n    874 arguments = getArguments(names, local_dict, global_dict, _frame_depth=_frame_depth)\r\n\r\nFile D:\\ProgramData\\Anaconda3\\envs\\qlib\\lib\\site-packages\\numexpr\\necompiler.py:721, in getExprNames(text, context, sanitize)\r\n    720 def getExprNames(text, context, sanitize: bool=True):\r\n--> 721     ex = stringToExpression(text, {}, context, sanitize)\r\n    722     ast = expressionToAST(ex)\r\n    723     input_order = getInputOrder(ast, None)\r\n\r\nFile D:\\ProgramData\\Anaconda3\\envs\\qlib\\lib\\site-packages\\numexpr\\necompiler.py:281, in stringToExpression(s, types, context, sanitize)\r\n    279     no_whitespace = re.sub(r'\\s+', '', s)\r\n    280     if _blacklist_re.search(no_whitespace) is not None:\r\n--> 281         raise ValueError(f'Expression {s} has forbidden control characters.')\r\n    283 old_ctx = expressions._context.get_current_context()\r\n    284 try:\r\n\r\nValueError: Expression (loss) <= (5.050614450000001e-13) has forbidden control characters.\r\n```",
        "comments": {
          "nodes": [
            {
              "author": {
                "login": "MilesCranmer"
              },
              "body": "Interesting. It seems like\r\n\r\n```python\r\nequations.query(f\"loss <= {threshold}\")\r\n```\r\n\r\nis causing the error. `equations` is a pandas dataframe and `threshold` is a float. So I am very surprised this doesn't work. \r\n\r\nCan you share the version information of everything, like your operating system, python version, pandas version, numpy version, etc.?\r\n\r\nAlso, could you try to report this as a bug to pandas? It seems like the parser isn't able to parse the string representations of floats on your machine, which seems like an issue.\r\n\r\nOn the PySR side we could look at a workaround which avoids using the `pandas.DataFrame.query` function.",
              "createdAt": "2024-07-14T14:47:03Z"
            }
          ],
          "pageInfo": {
            "hasNextPage": false,
            "endCursor": "Y3Vyc29yOnYyOpK5MjAyNC0wNy0xNFQxNTo0NzowMyswMTowMM4AmUKf"
          }
        }
      }
    }
  }
}