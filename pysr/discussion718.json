{
  "data": {
    "repository": {
      "discussion": {
        "number": 718,
        "title": "Import function issue \"Cannot convert expression to float\"",
        "body": "`def h_ref34(T,Vs,T1):`\r\n   `#Vs is the jet debit in kg/(m²*s)`\r\n    `a=np.tanh(Vs/8)`\r\n    `b=140*Vs*(1-Vs*(T-T1)/72000)`\r\n    `c=3.26*(1-np.tanh((T-T1)/128))*(T-T1)**2`\r\n    `return 190+a*(b+c)`\r\n\r\nI would like to implement this function to use it in a more complex regression but it doesn't seem to work.\r\nI have looked on the API and I though I understood but it seems that I didn't\r\n`model = PySRRegressor(\r\n    niterations=30,\r\n    binary_operators=[\"+\", \"*\",\"-\"],\r\n    unary_operators=[\"HTC(x) = 190+tanh(10/8)*(140*10*(1-10*(x-294)/72000+3.26*(1-tanh((x-294)/128))*(x-294)^2))\"] ,\r\n    extra_sympy_mappings={\r\n            \"HTC\": lambda x: 190+m.tanh(10/8)*(140*10*(1-10*(x-294)/72000+3.26*(1-m.tanh((x-294)/128))*(x-294)**2))},\r\n    **default_pysr_params,)` \r\n\r\nWhen I tried to fit the data, which are just X=[i for i in range(294,1100)] and Y=[h_ref34(T,Vs=10,T_wat=294) for T in X ], I get this error message :\r\n/ValueError                                Traceback (most recent call last)\r\nValueError: Error from parse_expr with transformed code: <code object <module> at 0x00000244BA2EE6A0, file \"<string>\", line 1>\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTypeError                                 Traceback (most recent call last)\r\nFile ~\\AppData\\Roaming\\Python\\Python312\\site-packages\\pysr\\export_sympy.py:91, in pysr2sympy(equation, feature_names_in, extra_sympy_mappings)\r\n     90 try:\r\n---> 91     return sympify(equation, locals=local_sympy_mappings, evaluate=False)\r\n     92 except TypeError as e:\r\n\r\nFile ~\\AppData\\Roaming\\Python\\Python312\\site-packages\\sympy\\core\\sympify.py:481, in sympify(a, locals, convert_xor, strict, rational, evaluate)\r\n    480     a = a.replace('\\n', '')\r\n--> 481     expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\r\n    482 except (TokenError, SyntaxError) as exc:\r\n\r\nFile ~\\AppData\\Roaming\\Python\\Python312\\site-packages\\sympy\\parsing\\sympy_parser.py:1090, in parse_expr(s, local_dict, transformations, global_dict, evaluate)\r\n   1089     local_dict[i] = null\r\n-> 1090 raise e from ValueError(f\"Error from parse_expr with transformed code: {code!r}\")\r\n\r\nFile ~\\AppData\\Roaming\\Python\\Python312\\site-packages\\sympy\\parsing\\sympy_parser.py:1081, in parse_expr(s, local_dict, transformations, global_dict, evaluate)\r\n   1080 try:\r\n-> 1081     rv = eval_expr(code, local_dict, global_dict)\r\n   1082     # restore neutral definitions for names\r\n\r\nFile ~\\AppData\\Roaming\\Python\\Python312\\site-packages\\sympy\\parsing\\sympy_parser.py:909, in eval_expr(code, local_dict, global_dict)\r\n    904 \"\"\"\r\n    905 Evaluate Python code generated by ``stringify_expr``.\r\n    906 \r\n    907 Generally, ``parse_expr`` should be used.\r\n    908 \"\"\"\r\n--> 909 expr = eval(\r\n    910     code, global_dict, local_dict)  # take local objects in preference\r\n    911 return expr\r\n\r\nFile <string>:1\r\n\r\nCell In[288], line 6, in <lambda>(x)\r\n      1 model = PySRRegressor(\r\n      2     niterations=30,\r\n      3     binary_operators=[\"+\", \"*\",\"-\"],\r\n      4     unary_operators=[\"HTC\"] ,\r\n      5     extra_sympy_mappings={\r\n----> 6             \"HTC\": lambda x: 190+m.tanh(10/8)*(140*10*(1-10*(x-294)/72000+3.26*(1-m.tanh((x-294)/128))*(x-294)**2))},\r\n      7     **default_pysr_params,)\r\n\r\nFile ~\\AppData\\Roaming\\Python\\Python312\\site-packages\\sympy\\core\\expr.py:340, in Expr.__float__(self)\r\n    339     raise TypeError(\"Cannot convert complex to float\")\r\n--> 340 raise TypeError(\"Cannot convert expression to float\")\r\n\r\nTypeError: Cannot convert expression to float\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTypeError                                 Traceback (most recent call last)\r\nCell In[289], line 1\r\n----> 1 model.fit(X, y)\r\n\r\nFile ~\\AppData\\Roaming\\Python\\Python312\\site-packages\\pysr\\sr.py:2087, in PySRRegressor.fit(self, X, y, Xresampled, weights, variable_names, complexity_of_variables, X_units, y_units)\r\n   2084     self._checkpoint()\r\n   2086 # Perform the search:\r\n-> 2087 self._run(X, y, runtime_params, weights=weights, seed=seed)\r\n   2089 # Then, after fit, we save again, so the pickle file contains\r\n   2090 # the equations:\r\n   2091 if not self.temp_equation_file:\r\n\r\nFile ~\\AppData\\Roaming\\Python\\Python312\\site-packages\\pysr\\sr.py:1921, in PySRRegressor._run(self, X, y, runtime_params, weights, seed)\r\n   1918 self.julia_state_stream_ = jl_serialize(out)\r\n   1920 # Set attributes\r\n-> 1921 self.equations_ = self.get_hof()\r\n   1923 if self.delete_tempfiles:\r\n   1924     shutil.rmtree(self.tempdir_)\r\n\r\nFile ~\\AppData\\Roaming\\Python\\Python312\\site-packages\\pysr\\sr.py:2412, in PySRRegressor.get_hof(self)\r\n   2409 torch_format = []\r\n   2411 for _, eqn_row in output.iterrows():\r\n-> 2412     eqn = pysr2sympy(\r\n   2413         eqn_row[\"equation\"],\r\n   2414         feature_names_in=self.feature_names_in_,\r\n   2415         extra_sympy_mappings=self.extra_sympy_mappings,\r\n   2416     )\r\n   2417     sympy_format.append(eqn)\r\n   2419     # NumPy:\r\n\r\nFile ~\\AppData\\Roaming\\Python\\Python312\\site-packages\\pysr\\export_sympy.py:95, in pysr2sympy(equation, feature_names_in, extra_sympy_mappings)\r\n     93 if \"got an unexpected keyword argument 'evaluate'\" in str(e):\r\n     94     return sympify(equation, locals=local_sympy_mappings)\r\n---> 95 raise TypeError(f\"Error processing equation '{equation}'\") from e\r\n\r\nTypeError: Error processing equation 'HTC(x0) * 0.0007979723263663934'",
        "comments": {
          "nodes": [
            {
              "author": {
                "login": "MilesCranmer"
              },
              "body": "The issue looks to be with the sympy version of the expression. What is `m.tan`? You will need to use sympy functions, rather than numpy or `math`.\r\n\r\n\r\nI would recommend just doing something like\r\n\r\n```python\r\nclass HTC(sympy.Function):\r\n    pass\r\n\r\nextra_sympy_mappings={\"HTC\": HTC}\r\n```\r\n\r\nIt won’t be able to numerically evaluate the expression in Python though. But if you just want the string form of the equation, this will help.",
              "createdAt": "2024-09-15T12:32:10Z"
            }
          ],
          "pageInfo": {
            "hasNextPage": false,
            "endCursor": "Y3Vyc29yOnYyOpK5MjAyNC0wOS0xNVQxMzozMjoxMCswMTowMM4Aooh6"
          }
        }
      }
    }
  }
}