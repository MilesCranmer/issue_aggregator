{
  "data": {
    "repository": {
      "issue": {
        "number": 761,
        "title": "[BUG]: Overwrite of Tensorboard logging file does not work",
        "body": "### What happened?\r\n\r\nHello,\r\n\r\nthank you very much for the new version 1.0.0 supporting Tensorboard logging. It's a great help to my work!\r\nOn my first tries I have experienced an issue when using the overwrite-parameter of the TensorBoardLoggerSpec set to True. It results in the error shown bellow, when executing for the second time, because the handle on the logging file is still blocked and the file can not be overwritten. \r\nAs a work-around I included the following function into TBLogger.jl:\r\n```julia\r\nfunction close_files!(lg::TBLogger)\r\n    # close open streams\r\n    for k=keys(lg.all_files)\r\n        close(lg.all_files[k])\r\n    end\r\nend\r\n```\r\nI call this function in logger_specs.py at the end of the write_hparams function to release the handle and it seems to work fine.\r\n\r\nBest regards\r\n\r\n### Version\r\n\r\n1.0.0\r\n\r\n### Operating System\r\n\r\nWindows\r\n\r\n### Package Manager\r\n\r\nConda\r\n\r\n### Interface\r\n\r\nScript (i.e., `python my_script.py`)\r\n\r\n### Relevant log output\r\n\r\n```shell\r\nFile \"C:\\Users\\x\\AppData\\Local\\miniforge3\\envs\\masterarbeit_sr\\Lib\\site-packages\\pysr\\sr.py\", line 2240, in fit\r\n    self._run(X, y, runtime_params, weights=weights, seed=seed, category=category)\r\n  File \"C:\\Users\\x\\AppData\\Local\\miniforge3\\envs\\masterarbeit_sr\\Lib\\site-packages\\pysr\\sr.py\", line 1920, in _run\r\n    logger = self.logger_spec.create_logger() if self.logger_spec else None\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\x\\AppData\\Local\\miniforge3\\envs\\masterarbeit_sr\\Lib\\site-packages\\pysr\\logger_specs.py\", line 56, in create_logger\r\n    return make_logger(log_dir, self.overwrite, self.log_interval)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\x\\.julia\\packages\\PythonCall\\Nr75f\\src\\JlWrap\\any.jl\", line 258, in __call__\r\n    return self._jl_callmethod($(pyjl_methodnum(pyjlany_call)), args, kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\njuliacall.JuliaError: IOError: unlink(\"logs/log\\\\events.out.tfevents.1.733232925065e9.LY-000006\"): resource busy or locked (EBUSY)\r\nStacktrace:\r\n  [1] uv_error\r\n    @ .\\libuv.jl:106 [inlined]\r\n  [2] unlink(p::String)\r\n    @ Base.Filesystem .\\file.jl:1105\r\n  [3] rm(path::String; force::Bool, recursive::Bool)\r\n    @ Base.Filesystem .\\file.jl:283\r\n  [4] rm(path::String; force::Bool, recursive::Bool)\r\n    @ Base.Filesystem .\\file.jl:294\r\n  [5] rm\r\n    @ .\\file.jl:273 [inlined]\r\n  [6] init_logdir(logdir::String, overwrite::TensorBoardLogger.InitPolicy)\r\n    @ TensorBoardLogger C:\\Users\\x\\.julia\\packages\\TensorBoardLogger\\0nEI0\\src\\TBLogger.jl:81\r\n  [7] TensorBoardLogger.TBLogger(logdir::String, overwrite::TensorBoardLogger.InitPolicy; time::Float64, prefix::String, purge_step::Nothing, step_increment::Int64, min_level::Base.CoreLogging.LogLevel)\r\n    @ TensorBoardLogger C:\\Users\\x\\.julia\\packages\\TensorBoardLogger\\0nEI0\\src\\TBLogger.jl:60\r\n  [8] TensorBoardLogger.TBLogger(logdir::String, overwrite::TensorBoardLogger.InitPolicy)\r\n    @ TensorBoardLogger C:\\Users\\x\\.julia\\packages\\TensorBoardLogger\\0nEI0\\src\\TBLogger.jl:53\r\n  [9] make_logger(log_dir::String, overwrite::Bool, log_interval::Int64)\r\n    @ Main .\\none:2\r\n [10] pyjlany_call(self::typeof(make_logger), args_::Py, kwargs_::Py)\r\n    @ PythonCall.JlWrap C:\\Users\\x\\.julia\\packages\\PythonCall\\Nr75f\\src\\JlWrap\\any.jl:43\r\n [11] _pyjl_callmethod(f::Any, self_::Ptr{PythonCall.C.PyObject}, args_::Ptr{PythonCall.C.PyObject}, nargs::Int64)\r\n    @ PythonCall.JlWrap C:\\Users\\x\\.julia\\packages\\PythonCall\\Nr75f\\src\\JlWrap\\base.jl:73\r\n [12] _pyjl_callmethod(o::Ptr{PythonCall.C.PyObject}, args::Ptr{PythonCall.C.PyObject})\r\n    @ PythonCall.JlWrap.Cjl C:\\Users\\x\\.julia\\packages\\PythonCall\\Nr75f\\src\\JlWrap\\C.jl:63\r\n```\r\n\r\n\r\n### Extra Info\r\n\r\n_No response_",
        "comments": {
          "nodes": [
            {
              "author": {
                "login": "MilesCranmer"
              },
              "body": "Thanks for this solution! Indeed it seems like the logger is not being closed. Do you want to add your workaround in a pull request? I think we can have a new method:\r\n\r\n```python\r\n    @abstractmethod\r\n    def close(self, logger):\r\n        pass\r\n```\r\n\r\nwithin the `AbstractLoggerSpec`. Then in `TensorBoardLoggerSpec`, you would put the Julia code (see the other Julia code in `logger_specs.py` and `expression_specs.py` to see examples).\r\n\r\nAnd in PySRRegressor we would just add it right after this line:\r\nhttps://github.com/MilesCranmer/PySR/blob/e11f824d5440646675b790665ad83f403ed0526a/pysr/sr.py#L2060\r\n\r\n\r\nLike:\r\n\r\n```python\r\n self.logger_spec.write_hparams(logger, self.get_params()) \r\n self.logger_spec.close(logger)\r\n```\r\n\r\nThen it will work for future logger types as well (e.g., if we ever add Wandb.jl)",
              "createdAt": "2024-12-03T22:33:52Z"
            }
          ],
          "pageInfo": {
            "hasNextPage": false,
            "endCursor": "Y3Vyc29yOnYyOpHOlfJcXA=="
          }
        }
      }
    }
  }
}