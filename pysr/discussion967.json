{
  "data": {
    "repository": {
      "discussion": {
        "number": 967,
        "title": "[BUG]: The dimensions of the input and output do not match.",
        "body": "### What happened?\n\nimport numpy as np\nimport pandas as pd\nfrom holoviews.plotting.bokeh.styles import font_size\nfrom pysr import PySRRegressor\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import r2_score\nimport time\nimport sympy\n\n# 读取数据\ndata = pd.read_excel('coefficient_0604.xlsx')\ntheta = data.iloc[:, 0].values\nvx = data.iloc[:, 2].values  # 第三列索引为2\nvz = data.iloc[:, 3].values  # 第四列索引为3\nTMAC = data.iloc[:, 4].values  # 第五列\nTTAC = data.iloc[:, 5].values  # 第六列\n\n# 准备输入特征 (vx, vz)\nX = np.column_stack((vx, vz))\n\n\n# 修改自定义倒数函数为SymPy兼容版本\ndef sympy_protected_inv(x):\n    return sympy.Piecewise(\n        (1.0 / x, sympy.Abs(x) > 1e-5),\n        (0.0, True)\n    )\n\n\n# 配置PySR模型 - TMAC\nprint(\"\\n\" + \"=\" * 50)\nprint(\"Training PySR for TMAC\")\nprint(\"=\" * 50)\nstart_time = time.time()\n\nmodel_tmac = PySRRegressor(\n    niterations=500,  # 迭代次数\n    populations=50,  # 种群数量\n    binary_operators=[\"+\", \"-\", \"*\", \"/\"],  # 二元运算符\n    unary_operators=[\"inv\",\"abs\"],  # 简化一元运算符\n    extra_sympy_mappings={'inv': sympy_protected_inv},  # 使用SymPy兼容函数\n\n    # 无量纲设置\n    dimensionless_constants_only=True,\n    dimensional_constraint_penalty=1000.0,\n\n    constraints={\n        '/':(0,1),\n        'inv': 6,  # 限制inv的使用深度\n    },\n    maxsize=10,  # 限制表达式最大大小\n    parsimony=0.1,  # 增加简洁性因子\n    weight_optimize=0.01,  # 优化权重\n    progress=True,  # 显示进度条\n    procs=4,  # 并行进程数\n    batching=False,  # 禁用批处理以避免问题\n    warm_start=True,  # 从之前的运行中继续\n    random_state=42,  # 随机种子\n    model_selection=\"best\",  # 选择最佳模型\n    elementwise_loss=\"loss(x, y) = (x - y)^2\",  # 平方损失\n)\n\nmodel_tmac.fit(X, TMAC,\n               X_units=[\"m/s\", \"m/s\"],\n               y_units=\"1\")\n\nprint(f\"Time taken: {time.time() - start_time:.2f} seconds\")\n\n# 配置PySR模型 - TTAC\nprint(\"\\n\" + \"=\" * 50)\nprint(\"Training PySR for TTAC\")\nprint(\"=\" * 50)\nstart_time = time.time()\n\nmodel_ttac = PySRRegressor(\n    niterations=200,\n    populations=100,\n    binary_operators=['+','-',\"*\", \"/\"],\n    unary_operators=[\"inv\", \"abs\"],\n    extra_sympy_mappings={'inv': sympy_protected_inv},\n    constraints={\n        '/':(0,1),\n        'inv': 4,\n    },\n    maxsize=10,  # 限制表达式复杂度\n    parsimony=0.1,\n\n    # 无量纲设置\n    dimensionless_constants_only=True,\n    dimensional_constraint_penalty=1000.0,\n\n    weight_optimize=0.01,\n    progress=True,\n    procs=4,\n    batching=False,\n    warm_start=True,\n    #random_state=42,\n    model_selection=\"best\",\n    elementwise_loss=\"loss(x, y) = (x - y)^2\",\n)\n\nmodel_ttac.fit(X, TTAC,\n               X_units=[\"m/s\",\"m/s\"],\n               y_units = \"1\")\nprint(f\"Time taken: {time.time() - start_time:.2f} seconds\")\n\n# 输出结果 - 直接从模型获取方程\nprint(\"\\n\\n\" + \"=\" * 50)\nprint(\"FINAL RESULTS\")\nprint(\"=\" * 50)\n\n\ndef get_best_equation(model):\n    \"\"\"从PySR模型获取最佳方程\"\"\"\n    try:\n        # 尝试获取SymPy表达式\n        return model.sympy()\n    except Exception as e:\n        print(f\"Error getting sympy equation: {e}\")\n        try:\n            # 如果失败，尝试获取字符串表达式\n            return str(model.get_best()['equation'])\n        except:\n            try:\n                # 如果仍然失败，尝试从模型描述中提取\n                return str(model).split(\"Equation:\")[1].split(\"\\n\")[0].strip()\n            except:\n                return \"Equation not available\"\n\ntmac_eq = get_best_equation(model_tmac)\nttac_eq = get_best_equation(model_ttac)\n\nprint(f\"TMAC Expression: {tmac_eq}\")\nprint(f\"TTAC Expression: {ttac_eq}\")\n\n\n# 计算R²分数\ndef calculate_r2(model, X, y):\n    try:\n        pred = model.predict(X)\n        return r2_score(y, pred)\n    except:\n        return float('nan')\n\n\ntmac_r2 = calculate_r2(model_tmac, X, TMAC)\nttac_r2 = calculate_r2(model_ttac, X, TTAC)\n\nprint(f\"TMAC Score (R²): {tmac_r2:.4f}\")\nprint(f\"TTAC Score (R²): {ttac_r2:.4f}\")\n\n# 保存结果到文件\nwith open('regression_results_pysr.txt', 'w', encoding='utf-8') as f:\n    f.write(\"=\" * 50 + \"\\n\")\n    f.write(\"SYMBOLIC REGRESSION RESULTS (PySR)\\n\")\n    f.write(\"=\" * 50 + \"\\n\\n\")\n    f.write(f\"TMAC Expression: {tmac_eq}\\n\")\n    f.write(f\"R² Score: {tmac_r2:.4f}\\n\\n\")\n    f.write(f\"TTAC Expression: {ttac_eq}\\n\")\n    f.write(f\"R² Score: {ttac_r2:.4f}\\n\")\n\nprint(\"Results saved to regression_results_pysr.txt\")\n\n# 可视化预测效果\nplt.figure(figsize=(12,6))\n\n# TMAC 结果\n\ntmac_pred = model_tmac.predict(X)\nax1 = plt.subplot(1,2,1)\nax1.scatter(TMAC, tmac_pred, alpha=0.6)\nax1.plot([min(TMAC), max(TMAC)], [min(TMAC), max(TMAC)], 'r--')\nax1.set_title('TMAC: Actual vs Predicted',fontsize=12)\nax1.set_xlabel('Actual TMAC',fontsize=12)\nax1.set_ylabel('Predicted TMAC',fontsize=12)\n\n\n# TTAC 结果\n\nttac_pred = model_ttac.predict(X)\nax2 = plt.subplot(1,2,2)\nax2.scatter(TTAC, ttac_pred, alpha=0.6, color='orange')\nax2.plot([min(TTAC), max(TTAC)], [min(TTAC), max(TTAC)], 'r--')\nax2.set_title('TTAC: Actual vs Predicted',fontsize=12)\nax2.set_xlabel('Actual TTAC',fontsize=12)\nax2.set_ylabel('Predicted TTAC',fontsize=12)\n\nplt.tight_layout()\nplt.savefig('symbolic_regression_results_pysr.png', dpi=300)\nplt.show()\n\n# 打印模型方程\nprint(\"\\nFinal Equations:\")\nprint(f\"TMAC = {tmac_eq}\")\nprint(f\"TTAC = {ttac_eq}\")\n\n### Version\n\n1.5.8\n\n### Operating System\n\n_No response_\n\n### Package Manager\n\nNone\n\n### Interface\n\nJupyter Notebook\n\n### Relevant log output\n\n```shell\n\n```\n\n### Extra Info\n\n我想回归一个无量纲的数，x1与x2均为有量纲的数，y为无量纲的数，如何使得回归的表达式为无量纲的",
        "comments": {
          "nodes": [
            {
              "author": {
                "login": "MilesCranmer"
              },
              "body": "Hi @jinbohou714,\r\n\r\nPlease avoid submitting so many duplicate issues as I have to close them manually.\r\n\r\nAm using a translation service so apologies in case of confusion. But to me it looks like your .fit call is correct. And you have `dimensionless_constants_only=True` to avoid dimensions in the learned constants. What is the issue you are seeing?\r\n\r\nBest,\r\nMiles",
              "createdAt": "2025-06-18T10:00:25Z"
            }
          ],
          "pageInfo": {
            "hasNextPage": false,
            "endCursor": "Y3Vyc29yOnYyOpK5MjAyNS0wNi0xOFQxMjowMDoyNSswMjowMM4Azhqy"
          }
        }
      }
    }
  }
}