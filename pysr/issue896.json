{
  "data": {
    "repository": {
      "issue": {
        "number": 896,
        "title": "[BUG]: Constraints seem do not work",
        "body": "### What happened?\n\nI have set the complexity of the exp operator to 9, but I find that in the final result, the expressions using exp have a higher complexity. My code looks like this:\n\n- `fit.py`\n```python\nimport numpy as np\nfrom pysr import PySRRegressor\n\n# ---------------------------------------------------\n# fit\nfit_file = \"test.dat\"\nfit_data = np.genfromtxt(fit_file, skip_header=1)\n\n# nondimensionalize the temperature\nT0 = 273.15\nT1 = 100\nfit_data[:, 0] = (fit_data[:, 0] - T0) / T1\nfit_data[:, 1] = fit_data[:, 1] / T1\n\n# calculate the weights\nweights = np.ones(fit_data.shape[0])\nmask = fit_data[:, 4] + 1.0 / fit_data[:, 5] * 8.149 > 5000.0\nweights[mask] = 0.1\n\nmodel = PySRRegressor(\n    procs=8,\n    niterations=100000,  # < Increase me for better results\n    populations=32,\n    model_selection=\"best\",\n    binary_operators=[\"+\", \"*\"],\n    unary_operators=[\"exp\"],\n    constraints={\n        # \"^\": (-1, 1),\n        # \"*\": (3, 3),\n        # \"/\": (-1, 9),\n        \"exp\": 9,\n    },\n    nested_constraints={\n        \"exp\": {\"exp\": 0},\n    },\n    complexity_of_operators={\n        \"+\": 1,\n        \"*\": 1,\n        \"exp\": 3\n    },\n    complexity_of_constants=1,\n    complexity_of_variables=1,\n    elementwise_loss=\"myloss(x, y, w) = w*abs(x-y)\",\n    # parsimony=1.0,\n    maxsize=30,\n    verbosity=0,\n    progress=False\n)\n\nmodel.fit(fit_data[:, (0, 1, 3)], fit_data[:, 4], weights=weights)\nprint(\"fit_Ret0: \", model)\n```\n\nThe test data file looks like:\n- `test.dat` (note: the data shown here is different from my actual data)\n```txt\nVariables = Te, Tw-Te, beta, lambda_t, Ret0, dN/dRet\n 2.825000e+02  0.000000e+00 -1.000000e-01 -2.743591e-02  1.024378e+02  2.552613e-02\n 2.825000e+02  0.000000e+00 -1.988000e-01 -6.591603e-02  2.842564e+01  8.250412e-02\n 2.825000e+02  0.000000e+00  2.000000e-01  3.352114e-02  1.704228e+03  5.008953e-03\n 2.825000e+02  0.000000e+00  5.000000e-01  6.057811e-02  4.042113e+03  4.201385e-03\n 2.825000e+02  0.000000e+00  0.000000e+00  0.000000e+00  2.978385e+02  1.098651e-02\n 2.825000e+02  3.000000e+01 -1.000000e-01 -1.935633e-02  6.408900e+03  2.489226e-03\n 2.825000e+02  3.000000e+01  2.000000e-01  2.832991e-02  1.563851e+04  2.421356e-03\n 2.825000e+02  3.000000e+01  5.000000e-01  4.891305e-02  1.655809e+04  2.888320e-03\n 2.825000e+02  3.000000e+01  0.000000e+00  0.000000e+00  1.002312e+04  2.112837e-03\n 2.825000e+02  6.000000e+01 -1.000000e-01 -1.891124e-02  7.874561e+03  2.806374e-03\n 2.825000e+02  6.000000e+01 -1.988000e-01 -5.541928e-02  2.009454e+03  6.122618e-03\n 2.825000e+02  6.000000e+01  2.000000e-01  2.324217e-02  9.805418e+03  3.813674e-03\n 2.825000e+02  6.000000e+01  5.000000e-01  3.541721e-02  1.134557e+04  4.912840e-03\n 2.825000e+02  6.000000e+01  0.000000e+00  0.000000e+00  9.940237e+03  3.057110e-03\n 2.962500e+02 -1.650000e+01 -1.000000e-01 -2.813276e-02  8.906723e+01  4.193765e-02\n 2.962500e+02 -1.650000e+01 -1.988000e-01 -5.601287e-02  1.712235e+01  1.604313e-01\n 2.962500e+02 -1.650000e+01  2.000000e-01  3.702231e-02  2.753145e+02  2.099043e-02\n 2.962500e+02 -1.650000e+01  5.000000e-01  6.702311e-02  5.809442e+02  1.231033e-02\n 2.962500e+02 -1.650000e+01  0.000000e+00  0.000000e+00  1.199008e+02  3.108241e-02\n 2.962500e+02  0.000000e+00 -1.000000e-01 -2.743594e-02  1.024378e+02  2.552613e-02\n 2.962500e+02  0.000000e+00 -1.988000e-01 -6.591606e-02  2.842570e+01  8.250430e-02\n 2.962500e+02  0.000000e+00  2.000000e-01  3.352119e-02  1.704228e+03  5.008953e-03\n 2.962500e+02  0.000000e+00  5.000000e-01  6.057818e-02  4.042113e+03  4.201385e-03\n 2.962500e+02  0.000000e+00  0.000000e+00  0.000000e+00  2.978385e+02  1.098651e-02\n 2.962500e+02  2.800000e+01  2.000000e-01  2.731981e-02  9.823410e+03  3.014501e-03\n 2.962500e+02  2.800000e+01  5.000000e-01  4.901424e-02  1.200164e+04  3.295117e-03\n 2.962500e+02  3.300000e+01 -1.000000e-01 -2.103145e-02  2.576122e+03  3.721941e-03\n 2.962500e+02  3.300000e+01 -1.988000e-01 -5.828011e-02  2.002591e+02  1.381496e-02\n 2.962500e+02  3.900000e+01  0.000000e+00  0.000000e+00  6.539005e+03  2.919858e-03\n 2.962500e+02  4.900000e+01 -1.000000e-01 -1.928771e-02  3.874270e+03  3.558871e-03\n 2.962500e+02  4.900000e+01 -1.988000e-01 -5.432182e-02  5.751283e+02  1.118220e-02\n 2.962500e+02  4.900000e+01  2.000000e-01  2.288547e-02  9.642044e+03  3.221105e-03\n 2.962500e+02  4.900000e+01  5.000000e-01  4.084245e-02  9.999880e+03  4.109915e-03\n 2.962500e+02  4.900000e+01  0.000000e+00  0.000000e+00  6.847700e+03  3.226664e-03\n 3.075000e+02 -3.100000e+01 -1.000000e-01 -2.923125e-02  6.543178e+01  5.310561e-02\n 3.075000e+02 -3.100000e+01  2.000000e-01  3.981053e-02  1.569200e+02  2.961772e-02\n 3.075000e+02 -3.100000e+01  5.000000e-01  7.442391e-02  2.974350e+02  2.692201e-02\n 3.075000e+02 -3.100000e+01  0.000000e+00  0.000000e+00  9.120003e+01  4.083110e-02\n 3.075000e+02  0.000000e+00 -1.000000e-01 -2.743596e-02  1.024378e+02  2.552613e-02\n 3.075000e+02  0.000000e+00 -1.988000e-01 -6.591608e-02  2.842565e+01  8.250424e-02\n 3.075000e+02  0.000000e+00  2.000000e-01  3.352121e-02  1.704228e+03  5.008953e-03\n 3.075000e+02  0.000000e+00  5.000000e-01  6.057822e-02  4.042113e+03  4.201385e-03\n 3.075000e+02  0.000000e+00  0.000000e+00  0.000000e+00  2.978385e+02  1.098651e-02\n 3.075000e+02  3.000000e+01 -1.000000e-01 -2.302101e-02  9.512734e+02  5.986260e-03\n 3.075000e+02  3.000000e+01 -1.988000e-01 -6.553266e-02  8.704562e+01  2.759111e-02\n 3.075000e+02  3.000000e+01  2.000000e-01  2.899731e-02  7.354203e+03  3.559013e-03\n 3.075000e+02  3.000000e+01  5.000000e-01  5.032086e-02  9.701130e+03  3.601060e-03\n 3.075000e+02  3.000000e+01  0.000000e+00  0.000000e+00  3.312189e+03  3.967529e-03\n 3.075000e+02  6.000000e+01 -1.000000e-01 -1.889011e-02  2.361255e+03  4.389900e-03\n 3.075000e+02  6.000000e+01 -1.988000e-01 -5.389903e-02  3.224553e+02  1.427398e-02\n 3.075000e+02  6.000000e+01  2.000000e-01  2.421553e-02  8.163902e+03  3.713564e-03\n 3.075000e+02  6.000000e+01  5.000000e-01  4.054109e-02  9.081124e+03  4.430158e-03\n 3.075000e+02  6.000000e+01  0.000000e+00  0.000000e+00  4.857701e+03  3.644167e-03\n```\n\nThe final result is:\n- `hall_of_fame.csv`\n```csv\nComplexity,Loss,Equation\n1,1019.46515,\"277.36813\"\n3,1019.3371,\"x1 + 277.61838\"\n5,960.86255,\"(x1 * 998.79474) + 308.4246\"\n7,911.9348,\"((x1 + x2) * 1974.1824) + 399.67795\"\n8,873.6565,\"exp((x2 + x1) * 16.93677)\"\n9,642.32935,\"(x1 + 0.18429896) * ((x2 * 91295.97) + 5796.819)\"\n11,605.04,\"((x2 * 86498.06) + 5564.091) * ((x1 + 0.15956841) + x2)\"\n12,560.3163,\"exp((x2 * 27.91094) + (x1 * 5.0723066)) * 308.47354\"\n13,520.2272,\"(((x1 + 0.5236133) * x1) + 0.076774016) * ((x2 * 184539.25) + 11059.955)\"\n14,514.94586,\"exp((x2 * 28.870749) + (8.085478 + x1)) * (x1 + 0.19179988)\"\n15,449.48538,\"((x2 * 233696.64) + 14937.304) * (x1 + (((x0 * x1) * -2.7155223) + 0.07407617))\"\n16,399.3464,\"exp((x1 * ((x1 * -11.924228) + 9.750245)) + (x2 * 31.16684)) * 576.9267\"\n18,352.93536,\"624.6447 * exp((((x0 + -0.63518363) * (x1 * (x1 + -0.80913025))) + x2) * 26.418718)\"\n20,286.39877,\"exp(((x2 * -346.3195) + 49.33007) * (((x1 * (x1 + -0.7598638)) * -0.3693085) + x2)) * 462.6145\"\n22,244.77684,\"exp((x2 + (((x0 + -0.5675108) * x1) * (x1 + -0.7470025))) * (42.623722 + (x2 * -299.51764))) * 548.06476\"\n24,200.0235,\"exp(((x2 * -328.7701) + 46.36623) * (x2 + ((((x1 + -0.60823655) * (x0 + -0.5078294)) + 0.069101095) * x1))) * 497.94235\"\n26,137.18576,\"exp((x2 + (((x2 + -0.3045687) + (x1 * 0.3922968)) * (x1 * (x0 + -0.9200059)))) * ((x2 * -541.6115) + 73.894455)) * 253.51038\"\n28,108.886665,\"exp(((x2 * -534.5706) + 66.92555) * (x2 + ((x0 + -1.0756681) * (x1 * ((((x2 * 1.4489211) + 0.3245727) * x1) + -0.25936234))))) * 317.4697\"\n30,107.37516,\"318.1276 * (exp((((x1 * (-0.26514557 + (((x2 * 1.4665501) + 0.3321675) * x1))) * (x0 + -1.0551838)) + x2) * ((x2 * -534.5706) + 66.81026)) + 0.06716899)\"\n```\n\nThank you for your assistance!\n\n### Version\n\n1.5.5\n\n### Operating System\n\nLinux\n\n### Package Manager\n\nConda\n\n### Interface\n\nScript (i.e., `python my_script.py`)\n\n### Relevant log output\n\n```shell\n\n```\n\n### Extra Info\n\n_No response_",
        "comments": {
          "nodes": [
            {
              "author": {
                "login": "MilesCranmer"
              },
              "body": "It looks like you set `constraints={\"exp\": 9}`. This means that an exp operator can only have a complexity of 9 in its argument. Not that exp itself has 9 complexity. The code also has \n\n```\n    complexity_of_operators={\n        \"+\": 1,\n        \"*\": 1,\n        \"exp\": 3\n    },\n```\n\nWhich sets the complexity of exp to 3\n\nhttps://ai.damtp.cam.ac.uk/pysr/api/",
              "createdAt": "2025-04-23T16:16:50Z"
            },
            {
              "author": {
                "login": "SJ2050cn"
              },
              "body": "> It looks like you set `constraints={\"exp\": 9}`. This means that an exp operator can only have a complexity of 9 in its argument. Not that exp itself has 9 complexity. The code also has\n> \n> ```\n>     complexity_of_operators={\n>         \"+\": 1,\n>         \"*\": 1,\n>         \"exp\": 3\n>     },\n> ```\n> \n> Which sets the complexity of exp to 3\n> \n> https://ai.damtp.cam.ac.uk/pysr/api/\n\nYes, I want to set the complexity of the `exp` argument to be less than or equal to 9. However, in the `hall_of_fame.csv` file, the final expression\n\n```\n318.1276 * (exp((((x1 * (-0.26514557 + (((x2 * 1.4665501) + 0.3321675) * x1))) * (x0 + -1.0551838)) + x2) * ((x2 * -534.5706) + 66.81026)) + 0.06716899)\n```\n\nseems to have an `exp` argument that is more complex (i.e., has a complexity greater than 9). Did I misunderstand how the complexity setting works?",
              "createdAt": "2025-04-24T01:18:03Z"
            },
            {
              "author": {
                "login": "MilesCranmer"
              },
              "body": "I see. No you're not misunderstanding it. Indeed that expression should not be allowed. I am a bit confused by this and why it is is showing up... Do you have any more clues or simpler cases where you see this?",
              "createdAt": "2025-04-24T05:49:13Z"
            },
            {
              "author": {
                "login": "SJ2050cn"
              },
              "body": "> I see. No you're not misunderstanding it. Indeed that expression should not be allowed. I am a bit confused by this and why it is is showing up... Do you have any more clues or simpler cases where you see this?\n\nI have run this script on a cluster node multiple times and found that it is quite frequent to encounter a constraint-violated expression if the number of iterations is set to a large value (such as 100,000). When the number of iterations is small (like 1,000), all of the expressions look ok. So I suspect that this issue is hard to reproduce with a small number of iterations and is more likely to occur when the iteration number is large.",
              "createdAt": "2025-04-24T06:56:27Z"
            },
            {
              "author": {
                "login": "MilesCranmer"
              },
              "body": "Yep this is a bug! Thanks so much for reporting it. I'm surprised I had never ran into it myself. \n\nI've got a fix, will submit soon.\n\nhttps://github.com/MilesCranmer/SymbolicRegression.jl/pull/443",
              "createdAt": "2025-04-25T15:24:48Z"
            },
            {
              "author": {
                "login": "MilesCranmer"
              },
              "body": "If you open PySR in ~1 hour time it should use the updated SymbolicRegression.jl which does not have this bug.",
              "createdAt": "2025-04-25T20:05:26Z"
            }
          ],
          "pageInfo": {
            "hasNextPage": false,
            "endCursor": "Y3Vyc29yOnYyOpHOqMK8Xw=="
          }
        }
      }
    }
  }
}