{
  "data":
  {
    "repository":
    {
      "issue":
      {
        "number": 343,
        "title": "[BUG]: got an error when setting complexity_of_constants",
        "body": "### What happened?\r\n\r\nHi there,\r\n\r\nFirst of all, thank you for developing PySR! I have been experimenting with it and wanted to test it on the Nguyen benchmark problems, such as `x^3+x^2+x`. In order to prevent PySR from finding scalars, I tried setting `complexity_of_constants=100`. However, I encountered an error during the process:\r\n\r\n```\r\n(20, 1)\r\n(20, 1)\r\n[[ 0.85119328]\r\n [-0.72956365]\r\n [ 0.33353343]\r\n [ 0.95291893]\r\n [ 0.68468416]]\r\n[[ 2.19243833]\r\n [-0.58562036]\r\n [ 0.48188176]\r\n [ 2.72627573]\r\n [ 1.47445129]]\r\n  Activating project at `~/anaconda3/envs/myenv/share/pysr/depot/environments/pysr-0.11.5`\r\nWARNING: method definition for TwiceDifferentiable at /home/me/anaconda3/envs/myenv/share/pysr/depot/packages/NLSolversBase/cfJrN/src/objective_types/incomplete.jl:96 declares type variable TH but does not use it.\r\nWARNING: method definition for show at /home/me/anaconda3/envs/myenv/share/pysr/depot/packages/Optim/Zq1jM/src/univariate/printing.jl:7 declares type variable T but does not use it.\r\nWARNING: method definition for best_of_sample at /home/me/anaconda3/envs/myenv/share/pysr/depot/packages/SymbolicRegression/RziqW/src/Population.jl:72 declares type variable T but does not use it.\r\nWARNING: method definition for OneHotArray at /home/me/anaconda3/envs/myenv/share/pysr/depot/packages/MicroCollections/yJPLe/src/onehot.jl:79 declares type variable N but does not use it.\r\nWARNING: method definition for adapt_structure at /home/me/anaconda3/envs/myenv/share/pysr/depot/packages/Transducers/DSfBv/src/partitionby.jl:50 declares type variable inbounds but does not use it.\r\nWARNING: method definition for _foldl_array at /home/me/anaconda3/envs/myenv/share/pysr/depot/packages/Transducers/DSfBv/src/processes.jl:222 declares type variable T but does not use it.\r\nWARNING: method definition for multiplyexistingvar at /home/me/anaconda3/envs/myenv/share/pysr/depot/packages/DynamicPolynomials/juS7t/src/mult.jl:1 declares type variable C but does not use it.\r\nWARNING: method definition for multiplyexistingvar at /home/me/anaconda3/envs/myenv/share/pysr/depot/packages/DynamicPolynomials/juS7t/src/mult.jl:6 declares type variable C but does not use it.\r\nStarted!\r\nTraceback (most recent call last):\r\n  File \"14_test_pysr_srbenchmark.py\", line 71, in <module>\r\n    model.fit(Input, Output)\r\n  File \"/home/me/anaconda3/envs/myenv/lib/python3.7/site-packages/pysr/sr.py\", line 1750, in fit\r\n    self._run(X, y, mutated_params, weights=weights, seed=seed)\r\n  File \"/home/me/anaconda3/envs/myenv/lib/python3.7/site-packages/pysr/sr.py\", line 1620, in _run\r\n    addprocs_function=cluster_manager,\r\nRuntimeError: <PyCall.jlwrap (in a Julia function called from Python)\r\nJULIA: TaskFailedException\r\nStacktrace:\r\n [1] wait\r\n   @ ./task.jl:345 [inlined]\r\n [2] fetch\r\n   @ ./task.jl:360 [inlined]\r\n [3] _EquationSearch(::SymbolicRegression.CoreModule.ProgramConstantsModule.SRThreaded, datasets::Vector{SymbolicRegression.CoreModule.DatasetModule.Dataset{Float32}}; niterations::Int64, options::Options{Tuple{typeof(+), typeof(*), typeof(-), typeof(/)}, Tuple{typeof(cos), typeof(exp), typeof(safe_log), typeof(sin)}, Nothing, Nothing, typeof(loss), Int64}, numprocs::Int64, procs::Nothing, runtests::Bool, saved_state::Nothing, addprocs_function::Nothing)\r\n   @ SymbolicRegression ~/anaconda3/envs/myenv/share/pysr/depot/packages/SymbolicRegression/RziqW/src/SymbolicRegression.jl:649\r\n [4] EquationSearch(datasets::Vector{SymbolicRegression.CoreModule.DatasetModule.Dataset{Float32}}; niterations::Int64, options::Options{Tuple{typeof(+), typeof(*), typeof(-), typeof(/)}, Tuple{typeof(cos), typeof(exp), typeof(safe_log), typeof(sin)}, Nothing, Nothing, typeof(loss), Int64}, numprocs::Int64, procs::Nothing, multithreading::Bool, runtests::Bool, saved_state::Nothing, addprocs_function::Nothing)\r\n   @ SymbolicRegression ~/anaconda3/envs/myenv/share/pysr/depot/packages/SymbolicRegression/RziqW/src/SymbolicRegression.jl:346\r\n [5] EquationSearch(X::Matrix{Float32}, y::Matrix{Float32}; niterations::Int64, weights::Nothing, varMap::Vector{String}, options::Options{Tuple{typeof(+), typeof(*), typeof(-), typeof(/)}, Tuple{typeof(cos), typeof(exp), typeof(safe_log), typeof(sin)}, Nothing, Nothing, typeof(loss), Int64}, numprocs::Int64, procs::Nothing, multithreading::Bool, runtests::Bool, saved_state::Nothing, addprocs_function::Nothing)\r\n   @ SymbolicRegression ~/anaconda3/envs/myenv/share/pysr/depot/packages/SymbolicRegression/RziqW/src/SymbolicRegression.jl:295\r\n [6] #EquationSearch#21\r\n   @ ~/anaconda3/envs/myenv/share/pysr/depot/packages/SymbolicRegression/RziqW/src/SymbolicRegression.jl:320 [inlined]\r\n [7] invokelatest(::Any, ::Any, ::Vararg{Any}; kwargs::Base.Pairs{Symbol, Any, NTuple{8, Symbol}, NamedTuple{(:weights, :niterations, :varMap, :options, :numprocs, :multithreading, :saved_state, :addprocs_function), Tuple{Nothing, Int64, Vector{String}, Options{Tuple{typeof(+), typeof(*), typeof(-), typeof(/)}, Tuple{typeof(cos), typeof(exp), typeof(safe_log), typeof(sin)}, Nothing, Nothing, typeof(loss), Int64}, Int64, Bool, Nothing, Nothing}}})\r\n   @ Base ./essentials.jl:731\r\n [8] _pyjlwrap_call(f::Function, args_::Ptr{PyCall.PyObject_struct}, kw_::Ptr{PyCall.PyObject_struct})\r\n   @ PyCall ~/anaconda3/envs/myenv/share/pysr/depot/packages/PyCall/ygXW2/src/callback.jl:32\r\n [9] pyjlwrap_call(self_::Ptr{PyCall.PyObject_struct}, args_::Ptr{PyCall.PyObject_struct}, kw_::Ptr{PyCall.PyObject_struct})\r\n   @ PyCall ~/anaconda3/envs/myenv/share/pysr/depot/packages/PyCall/ygXW2/src/callback.jl:44\r\n\r\n    nested task error: TaskFailedException\r\n    Stacktrace:\r\n     [1] wait\r\n       @ ./task.jl:345 [inlined]\r\n     [2] fetch\r\n       @ ./task.jl:360 [inlined]\r\n     [3] (::SymbolicRegression.var\"#46#77\"{Vector{Vector{Task}}, Int64, Int64})()\r\n       @ SymbolicRegression ./task.jl:484\r\n    \r\n        nested task error: UndefVarError: T not defined\r\n        Stacktrace:\r\n         [1] best_of_sample(pop::Population{Float32}, running_search_statistics::SymbolicRegression.AdaptiveParsimonyModule.RunningSearchStatistics, options::Options{Tuple{typeof(+), typeof(*), typeof(-), typeof(/)}, Tuple{typeof(cos), typeof(exp), typeof(safe_log), typeof(sin)}, Nothing, Nothing, typeof(loss), Int64})\r\n           @ SymbolicRegression.PopulationModule ~/anaconda3/envs/myenv/share/pysr/depot/packages/SymbolicRegression/RziqW/src/Population.jl:89\r\n         [2] reg_evol_cycle(dataset::SymbolicRegression.CoreModule.DatasetModule.Dataset{Float32}, pop::Population{Float32}, temperature::Float32, curmaxsize::Int64, running_search_statistics::SymbolicRegression.AdaptiveParsimonyModule.RunningSearchStatistics, options::Options{Tuple{typeof(+), typeof(*), typeof(-), typeof(/)}, Tuple{typeof(cos), typeof(exp), typeof(safe_log), typeof(sin)}, Nothing, Nothing, typeof(loss), Int64}, record::Dict{String, Any})\r\n           @ SymbolicRegression.RegularizedEvolutionModule ~/anaconda3/envs/myenv/share/pysr/depot/packages/SymbolicRegression/RziqW/src/RegularizedEvolution.jl:0\r\n         [3] s_r_cycle(dataset::SymbolicRegression.CoreModule.DatasetModule.Dataset{Float32}, pop::Population{Float32}, ncycles::Int64, curmaxsize::Int64, running_search_statistics::SymbolicRegression.AdaptiveParsimonyModule.RunningSearchStatistics; verbosity::Int64, options::Options{Tuple{typeof(+), typeof(*), typeof(-), typeof(/)}, Tuple{typeof(cos), typeof(exp), typeof(safe_log), typeof(sin)}, Nothing, Nothing, typeof(loss), Int64}, record::Dict{String, Any})\r\n           @ SymbolicRegression.SingleIterationModule ~/anaconda3/envs/myenv/share/pysr/depot/packages/SymbolicRegression/RziqW/src/SingleIteration.jl:37\r\n         [4] macro expansion\r\n           @ ~/anaconda3/envs/myenv/share/pysr/depot/packages/SymbolicRegression/RziqW/src/SymbolicRegression.jl:573 [inlined]\r\n         [5] (::SymbolicRegression.var\"#44#75\"{SymbolicRegression.CoreModule.ProgramConstantsModule.SRThreaded, Options{Tuple{typeof(+), typeof(*), typeof(-), typeof(/)}, Tuple{typeof(cos), typeof(exp), typeof(safe_log), typeof(sin)}, Nothing, Nothing, typeof(loss), Int64}, Vector{Vector{Task}}, Int64, SymbolicRegression.AdaptiveParsimonyModule.RunningSearchStatistics, Int64, SymbolicRegression.CoreModule.DatasetModule.Dataset{Float32}, Int64})()\r\n           @ SymbolicRegression ./threadingconstructs.jl:258>\r\n```\r\n\r\nHere's the code snippet I used:\r\n\r\n```python\r\nimport os\r\nos.environ['CUDA_VISIBLE_DEVICES'] = '6'\r\n\r\nimport time\r\nimport numpy as np\r\n# import sympy as sp\r\n# import torch\r\n# import pandas as pd\r\n\r\nfrom pysr import PySRRegressor\r\n\r\nfrom utils.data import get_benchmark_data\r\n\r\n\r\nnp.random.seed(0)\r\n\r\nX, Y, use_constant, expression, variables_name = get_benchmark_data('benchmark.csv',\r\n                        'Nguyen-1',\r\n                        1000)\r\n\r\nInput = X\r\nOutput = Y\r\nprint(X.shape)\r\nprint(Y.shape)\r\nprint(Input[:5])\r\nprint(Output[:5])\r\n\r\nnp.random.seed(0)\r\nmodel = PySRRegressor(\r\n    # random_state=0,\r\n    # deterministic=True,\r\n    # Make a PySR search give the same result every run.\r\n    # To use this, you must turn off parallelism (with procs=0, multithreading=False), \r\n    # and set random_state to a fixed seed. Default is False.\r\n    # procs=0,\r\n    # multithreading=False,\r\n    niterations=1000,  # < Increase me for better results\r\n    binary_operators=[\"+\", \"*\", \"-\", \"/\"],\r\n    # should_optimize_constants=use_constant,\r\n    # complexity_of_constants=100, # to prevent PySR finding scalars\r\n    unary_operators=[\r\n        \"cos\",\r\n        \"exp\",\r\n        \"log\",\r\n        \"sin\",\r\n        # \"inv(x) = 1/x\",\r\n        # \"neg(x) = -x\",\r\n        # ^ Custom operator (julia syntax)\r\n    ],\r\n    # extra_sympy_mappings={\"inv\": lambda x: 1 / x,\r\n    #                       \"neg\": lambda x: -x},\r\n    # ^ Define operator for SymPy as well\r\n    loss=\"loss(prediction, target) = (prediction - target)^2\",\r\n    # ^ Custom loss function (julia syntax)\r\n)\r\n\r\nstart_time = time.time()\r\nnp.random.seed(0)\r\nmodel.fit(Input, Output)\r\nend_time = time.time()\r\ntime_cost = end_time - start_time\r\nprint('time_cost',time_cost)\r\n\r\nprint(model)\r\n```\r\n\r\nInterestingly, when I commented out the line `complexity_of_constants=100,` the code ran without any errors. Do you have any insights into this issue?\r\n\r\n\r\n### Version\r\n\r\n0.11.5\r\n\r\n### Operating System\r\n\r\nLinux\r\n\r\n### Package Manager\r\n\r\nNone\r\n\r\n### Interface\r\n\r\nScript (i.e., `python my_script.py`)\r\n\r\n### Relevant log output\r\n\r\n_No response_\r\n\r\n### Extra Info\r\n\r\n_No response_",
        "comments":
        {
          "nodes":
          [
            {
              "author":
              {
                "login": "MilesCranmer"
              },
              "body": "Thanks for the bug report. Could you try seeing if this goes away in the latest version of PySR? (v0.14.1)",
              "createdAt": "2023-06-02T12:56:08Z"
            },
            {
              "author":
              {
                "login": "x66ccff"
              },
              "body": "Yeah, this bug goes away in v0.14.1. Thank you!",
              "createdAt": "2023-06-04T05:25:01Z"
            }
          ],
          "pageInfo":
          {
            "hasNextPage": false,
            "endCursor": "Y3Vyc29yOnYyOpHOXeavIw=="
          }
        }
      }
    }
  }
}