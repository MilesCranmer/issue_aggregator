{
  "data": {
    "repository": {
      "issue": {
        "number": 804,
        "title": "[BUG]: Customize PySR",
        "body": "### What happened?\r\n\r\nI am trying to customize PySR, I have revised the juliapkg.json file following the instructions as :\r\n```json\r\n {\r\n    \"julia\": \"=1.10.0, 1.10.3\",\r\n    \"packages\": {\r\n        \"SymbolicRegression\": {\r\n            \"uuid\": \"8254be44-1295-4e6a-a16d-46603ac705cb\",\r\n            \"dev\":true,\r\n            \"path\":\"/home/drivesim/Documents/SR/SymbolicRegression.jl\"\r\n        },\r\n```\r\nand it works.\r\nThen I try to adding additional functions and package (\"JSON\" and \"PythonCall\") in the Population.jl file. I have written them in the project.toml and Manifest.toml in SymbolicRegression.jl. and adding the packages in the Population.jl as follows:\r\n```julia\r\nusing JSON\r\nusing PythonCall\r\n```\r\nHowever, when I try to run the code, I got the error like:\r\n```\r\nFailed to precompile SymbolicRegression [8254be44-1295-4e6a-a16d-46603ac705cb] to \"/home/drivesim/.julia/compiled/v1.11/SymbolicRegression/jl_5hy8dP\".\r\nERROR: LoadError: ArgumentError: Package SymbolicRegression does not have JSON in its dependencies:\r\n- You may have a partially installed environment. Try `Pkg.instantiate()`\r\n  to ensure all packages in the environment are installed.\r\n- Or, if you have SymbolicRegression checked out for development and have\r\n  added JSON as a dependency but haven't updated your primary\r\n  environment's manifest file, try `Pkg.resolve()`.\r\n- Otherwise you may need to report an issue with SymbolicRegression\r\n```\r\n\r\n### Version\r\n\r\n1.3.0\r\n\r\n### Operating System\r\n\r\nLinux\r\n\r\n### Package Manager\r\n\r\npip\r\n\r\n### Interface\r\n\r\nScript (i.e., `python my_script.py`)\r\n\r\n### Relevant log output\r\n\r\n```shell\r\nFailed to precompile SymbolicRegression [8254be44-1295-4e6a-a16d-46603ac705cb] to \"/home/drivesim/.julia/compiled/v1.11/SymbolicRegression/jl_5hy8dP\".\r\nERROR: LoadError: ArgumentError: Package SymbolicRegression does not have JSON in its dependencies:\r\n- You may have a partially installed environment. Try `Pkg.instantiate()`\r\n  to ensure all packages in the environment are installed.\r\n- Or, if you have SymbolicRegression checked out for development and have\r\n  added JSON as a dependency but haven't updated your primary\r\n  environment's manifest file, try `Pkg.resolve()`.\r\n- Otherwise you may need to report an issue with SymbolicRegression\r\n```\r\n\r\n\r\n### Extra Info\r\n\r\n_No response_",
        "comments": {
          "nodes": [
            {
              "author": {
                "login": "MilesCranmer"
              },
              "body": "Oh it means you are missing the packages JSON and PythonCall in your custom version. To add them do this:\r\n\r\n```bash\r\n julia --project=\"/home/drivesim/Documents/SR/SymbolicRegression.jl\" -e 'using Pkg; pkg\"add JSON PythonCall\"'\r\n```",
              "createdAt": "2025-01-10T20:46:47Z"
            },
            {
              "author": {
                "login": "jun199704"
              },
              "body": "_**I run the above code**_\r\n(base) drivesim@drivesim-4090:~/Documents/SR/SymbolicRegression.jl$  julia --project=\"/home/drivesim/Documents/SR/SymbolicRegression.jl\" -e 'using Pkg; pkg\"add JSON PythonCall\"'\r\n┌ Warning: The Pkg REPL mode is intended for interactive use only, and should not be used from scripts. It is recommended to use the functional API instead.\r\n└ @ Pkg.REPLMode ~/.julia/juliaup/julia-1.11.2+0.x64.linux.gnu/share/julia/stdlib/v1.11/Pkg/src/REPLMode/REPLMode.jl:388\r\n   Resolving package versions...\r\n      Compat entries added for \r\n  No Changes to `~/Documents/SR/SymbolicRegression.jl/Project.toml`\r\n  No Changes to `~/Documents/SR/SymbolicRegression.jl/Manifest.toml`\r\nPrecompiling project...\r\n  2 dependencies successfully precompiled in 46 seconds. 128 already precompiled.\r\n  1 dependency had output during precompilation:\r\n┌ SymbolicRegression\r\n│      CondaPkg Found dependencies: /home/drivesim/.julia/packages/PythonCall/Nr75f/CondaPkg.toml\r\n│      CondaPkg Resolving changes\r\n│               + libstdcxx-ng\r\n│               + python\r\n│      CondaPkg Creating environment\r\n│               │ /home/drivesim/.julia/artifacts/7973f2c7725e2d0eef7a95159454c4145f0945a2/bin/micromamba\r\n│               │ -r /home/drivesim/.julia/scratchspaces/0b3b1443-0f03-428d-bdfb-f27f9c1191ea/root\r\n│               │ create\r\n│               │ -y\r\n│               │ -p /home/drivesim/Documents/SR/SymbolicRegression.jl/.CondaPkg/env\r\n│               │ --override-channels\r\n│               │ --no-channel-priority\r\n│               │ libstdcxx-ng[version='>=3.4,<13.0']\r\n│               │ python[version='>=3.8,<4',channel='conda-forge',build='*cpython*']\r\n│               └ -c conda-forge\r\n│  \r\n│  Transaction\r\n│  \r\n│    Prefix: /home/drivesim/Documents/SR/SymbolicRegression.jl/.CondaPkg/env\r\n│  \r\n│    Updating specs:\r\n│  \r\n│     - libstdcxx-ng[version='>=3.4,<13.0']\r\n│     - conda-forge::python[version='>=3.8,<4',build=*cpython*]\r\n│  \r\n│  \r\n│    Package                Version  Build               Channel          Size\r\n│  ─────────────────────────────────────────────────────────────────────────────\r\n│    Install:\r\n│  ─────────────────────────────────────────────────────────────────────────────\r\n│  \r\n│    + _libgcc_mutex            0.1  conda_forge         conda-forge       3kB\r\n│    + ld_impl_linux-64        2.43  h712a8e2_2          conda-forge     669kB\r\n│    + ca-certificates   2024.12.14  hbcca054_0          conda-forge     157kB\r\n│    + libgomp               12.4.0  h77fa898_1          conda-forge     419kB\r\n│    + _openmp_mutex            4.5  2_gnu               conda-forge      24kB\r\n│    + libgcc                12.4.0  h77fa898_1          conda-forge     783kB\r\n│    + libgcc-ng             12.4.0  h69a702a_1          conda-forge      52kB\r\n│    + libstdcxx             12.4.0  hc0a3c3a_1          conda-forge       3MB\r\n│    + openssl                3.3.1  h4bc722e_2          conda-forge       3MB\r\n│    + libzlib                1.3.1  h4ab18f5_1          conda-forge      62kB\r\n│    + libxcrypt             4.4.36  hd590300_1          conda-forge     100kB\r\n│    + libffi                 3.4.2  h7f98852_5          conda-forge      58kB\r\n│    + bzip2                  1.0.8  h4bc722e_7          conda-forge     253kB\r\n│    + ncurses                  6.5  he02047a_1          conda-forge     889kB\r\n│    + libuuid               2.38.1  h0b41bf4_0          conda-forge      34kB\r\n│    + libnsl                 2.0.1  hd590300_0          conda-forge      33kB\r\n│    + libexpat               2.6.2  h59595ed_0          conda-forge      74kB\r\n│    + xz                     5.2.6  h166bdaf_0          conda-forge     418kB\r\n│    + libstdcxx-ng          12.4.0  h4852527_1          conda-forge      52kB\r\n│    + tk                    8.6.13  noxft_h4845f30_101  conda-forge       3MB\r\n│    + libsqlite             3.46.0  hde9e2c9_0          conda-forge     865kB\r\n│    + readline                 8.2  h8228510_1          conda-forge     281kB\r\n│    + tzdata                 2024b  hc8b5060_0          conda-forge     122kB\r\n│    + python                3.12.5  h2ad013b_0_cpython  conda-forge      32MB\r\n│    + wheel                 0.45.1  pyhd8ed1ab_1        conda-forge      63kB\r\n│    + setuptools            75.8.0  pyhff2d567_0        conda-forge     776kB\r\n│    + pip                   24.3.1  pyh8b19718_2        conda-forge       1MB\r\n│  \r\n│    Summary:\r\n│  \r\n│    Install: 27 packages\r\n│  \r\n│    Total download: 49MB\r\n│  \r\n│  ─────────────────────────────────────────────────────────────────────────────\r\n│  \r\n│  \r\n│  \r\n│  Transaction starting\r\n│  Linking _libgcc_mutex-0.1-conda_forge\r\n│  Linking ld_impl_linux-64-2.43-h712a8e2_2\r\n│  Linking ca-certificates-2024.12.14-hbcca054_0\r\n│  Linking libgomp-12.4.0-h77fa898_1\r\n│  Linking _openmp_mutex-4.5-2_gnu\r\n│  Linking libgcc-12.4.0-h77fa898_1\r\n│  Linking libgcc-ng-12.4.0-h69a702a_1\r\n│  Linking libstdcxx-12.4.0-hc0a3c3a_1\r\n│  Linking openssl-3.3.1-h4bc722e_2\r\n│  Linking libzlib-1.3.1-h4ab18f5_1\r\n│  Linking libxcrypt-4.4.36-hd590300_1\r\n│  Linking libffi-3.4.2-h7f98852_5\r\n│  Linking bzip2-1.0.8-h4bc722e_7\r\n│  Linking ncurses-6.5-he02047a_1\r\n│  Linking libuuid-2.38.1-h0b41bf4_0\r\n│  Linking libnsl-2.0.1-hd590300_0\r\n│  Linking libexpat-2.6.2-h59595ed_0\r\n│  Linking xz-5.2.6-h166bdaf_0\r\n│  Linking libstdcxx-ng-12.4.0-h4852527_1\r\n│  Linking tk-8.6.13-noxft_h4845f30_101\r\n│  Linking libsqlite-3.46.0-hde9e2c9_0\r\n│  Linking readline-8.2-h8228510_1\r\n│  Linking tzdata-2024b-hc8b5060_0\r\n│  Linking python-3.12.5-h2ad013b_0_cpython\r\n│  Linking wheel-0.45.1-pyhd8ed1ab_1\r\n│  Linking setuptools-75.8.0-pyhff2d567_0\r\n│  Linking pip-24.3.1-pyh8b19718_2\r\n│  \r\n│  Transaction finished\r\n│  \r\n│  To activate this environment, use:\r\n│  \r\n│      micromamba activate /home/drivesim/Documents/SR/SymbolicRegression.jl/.CondaPkg/env\r\n│  \r\n│  Or to execute a single command in this environment, use:\r\n│  \r\n│      micromamba run -p /home/drivesim/Documents/SR/SymbolicRegression.jl/.CondaPkg/env mycommand\r\n└  \r\n**_But still, I have the error like this:_**\r\nPrecompiling SymbolicRegression...\r\nInfo Given SymbolicRegression was explicitly requested, output will be shown live \r\nERROR: LoadError: ArgumentError: Package SymbolicRegression does not have JSON in its dependencies:\r\n- You may have a partially installed environment. Try `Pkg.instantiate()`\r\n  to ensure all packages in the environment are installed.\r\n- Or, if you have SymbolicRegression checked out for development and have\r\n  added JSON as a dependency but haven't updated your primary\r\n  environment's manifest file, try `Pkg.resolve()`.\r\n- Otherwise you may need to report an issue with SymbolicRegression\r\nStacktrace:\r\n  [1] macro expansion\r\n    @ ./loading.jl:2299 [inlined]\r\n  [2] macro expansion\r\n    @ ./lock.jl:273 [inlined]\r\n  [3] __require(into::Module, mod::Symbol)\r\n    @ Base ./loading.jl:2271\r\n  [4] #invoke_in_world#3\r\n    @ ./essentials.jl:1089 [inlined]\r\n  [5] invoke_in_world\r\n    @ ./essentials.jl:1086 [inlined]\r\n  [6] require(into::Module, mod::Symbol)\r\n    @ Base ./loading.jl:2260\r\n  [7] include(mod::Module, _path::String)\r\n    @ Base ./Base.jl:557\r\n  [8] include(x::String)\r\n    @ SymbolicRegression ~/Documents/SR/SymbolicRegression.jl/src/SymbolicRegression.jl:1\r\n  [9] top-level scope\r\n    @ ~/Documents/SR/SymbolicRegression.jl/src/SymbolicRegression.jl:212\r\n [10] include\r\n    @ ./Base.jl:557 [inlined]\r\n [11] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt128}}, source::Nothing)\r\n    @ Base ./loading.jl:2881\r\n [12] top-level scope\r\n    @ stdin:6\r\nin expression starting at /home/drivesim/Documents/SR/SymbolicRegression.jl/src/Population.jl:1\r\nin expression starting at /home/drivesim/Documents/SR/SymbolicRegression.jl/src/SymbolicRegression.jl:1\r\nin expression starting at stdin:6\r\n  ✗ SymbolicRegression\r\n  0 dependencies successfully precompiled in 3 seconds. 108 already precompiled.\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/drivesim/Documents/SR/SymbolicRegression.jl/src/SymbolicRegression.py\", line 261, in <module>\r\n    from pysr import PySRRegressor, TemplateExpressionSpec\r\n  File \"/home/drivesim/anaconda3/lib/python3.12/site-packages/pysr/__init__.py\", line 11, in <module>\r\n    from .julia_import import jl, SymbolicRegression  # isort:skip\r\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/drivesim/anaconda3/lib/python3.12/site-packages/pysr/julia_import.py\", line 64, in <module>\r\n    jl.seval(\"using SymbolicRegression\")\r\n  File \"/home/drivesim/.julia/packages/PythonCall/Nr75f/src/JlWrap/module.jl\", line 27, in seval\r\n    return self._jl_callmethod($(pyjl_methodnum(pyjlmodule_seval)), expr)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\njuliacall.JuliaError: The following 1 direct dependency failed to precompile:\r\n\r\nSymbolicRegression \r\n\r\nFailed to precompile SymbolicRegression [8254be44-1295-4e6a-a16d-46603ac705cb] to \"/home/drivesim/.julia/compiled/v1.11/SymbolicRegression/jl_fNC00b\".\r\nERROR: LoadError: ArgumentError: Package SymbolicRegression does not have JSON in its dependencies:\r\n- You may have a partially installed environment. Try `Pkg.instantiate()`\r\n  to ensure all packages in the environment are installed.\r\n- Or, if you have SymbolicRegression checked out for development and have\r\n  added JSON as a dependency but haven't updated your primary\r\n  environment's manifest file, try `Pkg.resolve()`.\r\n- Otherwise you may need to report an issue with SymbolicRegression\r\nStacktrace:\r\n  [1] macro expansion\r\n    @ ./loading.jl:2299 [inlined]\r\n  [2] macro expansion\r\n    @ ./lock.jl:273 [inlined]\r\n  [3] __require(into::Module, mod::Symbol)\r\n    @ Base ./loading.jl:2271\r\n  [4] #invoke_in_world#3\r\n    @ ./essentials.jl:1089 [inlined]\r\n  [5] invoke_in_world\r\n    @ ./essentials.jl:1086 [inlined]\r\n  [6] require(into::Module, mod::Symbol)\r\n    @ Base ./loading.jl:2260\r\n  [7] include(mod::Module, _path::String)\r\n    @ Base ./Base.jl:557\r\n  [8] include(x::String)\r\n    @ SymbolicRegression ~/Documents/SR/SymbolicRegression.jl/src/SymbolicRegression.jl:1\r\n  [9] top-level scope\r\n    @ ~/Documents/SR/SymbolicRegression.jl/src/SymbolicRegression.jl:212\r\n [10] include\r\n    @ ./Base.jl:557 [inlined]\r\n [11] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt128}}, source::Nothing)\r\n    @ Base ./loading.jl:2881\r\n [12] top-level scope\r\n    @ stdin:6\r\nin expression starting at /home/drivesim/Documents/SR/SymbolicRegression.jl/src/Population.jl:1\r\nin expression starting at /home/drivesim/Documents/SR/SymbolicRegression.jl/src/SymbolicRegression.jl:1\r\nin expression starting at stdin:\r\n",
              "createdAt": "2025-01-12T16:15:04Z"
            },
            {
              "author": {
                "login": "jun199704"
              },
              "body": "**_This is my Project.toml, it seems that PythonCall and JSON have been added to the deps._**\r\n\r\nname = \"SymbolicRegression\"\r\nuuid = \"8254be44-1295-4e6a-a16d-46603ac705cb\"\r\nauthors = [\"MilesCranmer <miles.cranmer@gmail.com>\"]\r\nversion = \"1.5.0\"\r\n\r\n[deps]\r\nADTypes = \"47edcb42-4c32-4615-8424-f2b9edc5f35b\"\r\nCompat = \"34da2185-b29b-5c13-b0c7-acf172513d20\"\r\nConstructionBase = \"187b0558-2788-49d3-abe0-74a17ed4e7c9\"\r\nDates = \"ade2ca70-3891-5945-98fb-dc099432e06a\"\r\nDifferentiationInterface = \"a0c0ee7d-e4b9-4e03-894e-1c5f64a51d63\"\r\nDispatchDoctor = \"8d63f2c5-f18a-4cf2-ba9d-b3f60fc568c8\"\r\nDistributed = \"8ba89e20-285c-5b6f-9357-94700520ee1b\"\r\nDynamicDiff = \"7317a516-7a03-4707-b902-c6dba1468ba0\"\r\nDynamicExpressions = \"a40a106e-89c9-4ca8-8020-a735e8728b6b\"\r\nDynamicQuantities = \"06fc5a27-2a28-4c7c-a15d-362465fb6821\"\r\nJSON = \"682c06a0-de6a-54ab-a142-c8b1cf79cde6\"\r\nLineSearches = \"d3d80556-e9d4-5f37-9878-2ab0fcc64255\"\r\nLogging = \"56ddb016-857b-54e1-b83d-db4d58db5568\"\r\nLossFunctions = \"30fc2ffe-d236-52d8-8643-a9d8f7c094a7\"\r\nMLJModelInterface = \"e80e1ace-859a-464e-9ed9-23947d8ae3ea\"\r\nMacroTools = \"1914dd2f-81c6-5fcd-8719-6d5c9610ff09\"\r\nOptim = \"429524aa-4258-5aef-a3af-852621145aeb\"\r\nPkg = \"44cfe95a-1eb2-52ea-b672-e2afdf69b78f\"\r\nPrecompileTools = \"aea7be01-6a6a-4083-8856-8a6e6704d82a\"\r\nPrintf = \"de0858da-6303-5e67-8744-51eddeeeb8d7\"\r\nProgressMeter = \"92933f4c-e287-5a05-a399-4b506db050ca\"\r\nPythonCall = \"6099a3de-0909-46bc-b1f4-468b9a2dfc0d\"\r\nRandom = \"9a3f8284-a2c9-5f02-9a11-845980a1fd5c\"\r\nReexport = \"189a3867-3050-52da-a836-e630ba90ab69\"\r\nSpecialFunctions = \"276daf66-3868-5448-9aa4-cd146d93841b\"\r\nStatsBase = \"2913bbd2-ae8a-5f71-8c99-4fb6c76f3a91\"\r\nStyledStrings = \"f489334b-da3d-4c2e-b8f0-e476e12c162b\"\r\nTOML = \"fa267f1f-6049-4f14-aa54-33bafae1ed76\"\r\n\r\n[weakdeps]\r\nEnzyme = \"7da242da-08ed-463a-9acd-ee780be4f1d9\"\r\nJSON3 = \"0f8b85d8-7281-11e9-16c2-39a750bddbf1\"\r\nSymbolicUtils = \"d1185830-fcd6-423d-90d6-eec64667417b\"\r\n\r\n[extensions]\r\nSymbolicRegressionEnzymeExt = \"Enzyme\"\r\nSymbolicRegressionJSON3Ext = \"JSON3\"\r\nSymbolicRegressionSymbolicUtilsExt = \"SymbolicUtils\"\r\n\r\n[compat]\r\nADTypes = \"^1.4.0\"\r\nCompat = \"^4.16\"\r\nConstructionBase = \"1.0.0 - 1.5.6, 1.5.8 - 1\"\r\nDates = \"1\"\r\nDifferentiationInterface = \"0.5, 0.6\"\r\nDispatchDoctor = \"^0.4.17\"\r\nDistributed = \"<0.0.1, 1\"\r\nDynamicDiff = \"0.2\"\r\nDynamicExpressions = \"~1.9\"\r\nDynamicQuantities = \"1\"\r\nEnzyme = \"0.12, 0.13\"\r\nJSON = \"0.21.4\"\r\nJSON3 = \"1\"\r\nLineSearches = \"7\"\r\nLogging = \"1\"\r\nLossFunctions = \"0.10, 0.11, 1\"\r\nMLJModelInterface = \"~1.5, ~1.6, ~1.7, ~1.8, ~1.9, ~1.10, ~1.11\"\r\nMacroTools = \"0.4, 0.5\"\r\nOptim = \"~1.8, ~1.9, ~1.10\"\r\nPkg = \"<0.0.1, 1\"\r\nPrecompileTools = \"1\"\r\nPrintf = \"<0.0.1, 1\"\r\nProgressMeter = \"1.10\"\r\nPythonCall = \"0.9.23\"\r\nRandom = \"<0.0.1, 1\"\r\nReexport = \"1\"\r\nSpecialFunctions = \"0.10.1, 1, 2\"\r\nStatsBase = \"0.33, 0.34\"\r\nStyledStrings = \"1\"\r\nSymbolicUtils = \"0.19, ^1.0.5, 2, 3\"\r\nTOML = \"<0.0.1, 1\"\r\njulia = \"1.10\"\r\n\r\n[extras]\r\nEnzyme = \"7da242da-08ed-463a-9acd-ee780be4f1d9\"\r\nJSON3 = \"0f8b85d8-7281-11e9-16c2-39a750bddbf1\"\r\nSymbolicUtils = \"d1185830-fcd6-423d-90d6-eec64667417b\"",
              "createdAt": "2025-01-12T16:17:38Z"
            },
            {
              "author": {
                "login": "MilesCranmer"
              },
              "body": "That's good! Maybe try deleting the local python environment and re-installing PySR with the custom juliapkg.json that points to your SymbolicRegression?\r\n\r\nWorst case you could just directly use `juliapkg`: https://github.com/JuliaPy/pyjuliapkg.\r\n\r\nJust run the `juliapkg.add(pkg, uuid)` _before_ importing PySR, and it will modify the environment with those extra dependencies.",
              "createdAt": "2025-01-12T18:05:23Z"
            },
            {
              "author": {
                "login": "MilesCranmer"
              },
              "body": "Speaking of which, maybe just try using that directly to edit the juliapkg.json? I wonder if it's just not being stored correctly.\r\n\r\nThe full signature is\r\n\r\n```\r\nadd(pkg, uuid, dev=False, version=None, path=None, subdir=None, url=None, rev=None, target=None)\r\n```\r\n\r\nso you can tag SymbolicRegression and put `dev=True, path=\"your/path\"`.\r\n\r\nAgain, do this before importing PySR.",
              "createdAt": "2025-01-12T18:06:16Z"
            },
            {
              "author": {
                "login": "jun199704"
              },
              "body": "I am still working on this problem and I want to check when adding \"JSON\" and \"PythonCall\", should them be added to the project in \"SymbolicRegression.jl\" or \"PySR\" or both. Currently I only added them in the project.toml and manifest in  \"SymbolicRegression.jl\" and tried to use them in the \"population.jl\" file in \"SymbolicRegression.jl\". \r\n",
              "createdAt": "2025-01-13T20:03:16Z"
            },
            {
              "author": {
                "login": "MilesCranmer"
              },
              "body": "Make sure to instantiate the environment of SymbolicRegression.jl with `Pkg.instantiate`. Then you can add it to PySR with the development setting ",
              "createdAt": "2025-01-13T20:32:29Z"
            }
          ],
          "pageInfo": {
            "hasNextPage": false,
            "endCursor": "Y3Vyc29yOnYyOpHOmkPU5Q=="
          }
        }
      }
    }
  }
}