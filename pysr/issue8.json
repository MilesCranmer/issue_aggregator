{
  "data":
  {
    "repository":
    {
      "issue":
      {
        "number": 8,
        "title": "Not able to run bigger runs on 0.3.10",
        "body": "Hi,\r\n\r\nAfter upgrading to 0.3.10 a simple example I run stopped working. Julia runs for a while, updates the results 1-3 times and then worker Julia processes die (the main one survives, but CPU usage go from 100% to couple of percent).\r\nThe code I use: https://pastebin.com/4DsQ3mN4\r\nCould anyone check if they experience similar behaviour on their machine? I'm not sure if it something with my environment or the pysr itself.\r\n\r\nThanks",
        "comments":
        {
          "nodes":
          [
            {
              "author":
              {
                "login": "sheevy"
              },
              "body": "~~My git bisect seems to indicate the culprit is cb0e2e93d0d0c9884d058d5fceaa39737771f8b3~~\r\n\r\nI tried to git bisect it but got the following error for a lot of versions:\r\n```\r\nERROR: LoadError: On worker 2:\r\nMethodError: no method matching run(::RemoteException, ::Int64; verbosity=1000000000)\r\nClosest candidates are:\r\n  run(::Population, ::Integer; verbosity) at /home/siwy/code/PySR/julia/sr.jl:632\r\n#51 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/macros.jl:87\r\n#103 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:290\r\nrun_work_thunk at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:79\r\nrun_work_thunk at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:88\r\n#96 at ./task.jl:356\r\n\r\n...and 3 more exception(s).\r\n\r\nStacktrace:\r\n [1] sync_end(::Channel{Any}) at ./task.jl:314\r\n [2] macro expansion at ./task.jl:333 [inlined]\r\n [3] fullRun(::Int64; npop::Int64, ncyclesperiteration::Int64, fractionReplaced::Float32, verbosity::Int32, topn::Int64) at /home/siwy/code/PySR/julia/sr.jl:768\r\n [4] top-level scope at /tmp/.runfile_91448480884608366202.jl:4\r\n [5] include(::Function, ::Module, ::String) at ./Base.jl:380\r\n [6] include(::Module, ::String) at ./Base.jl:368\r\n [7] exec_options(::Base.JLOptions) at ./client.jl:296\r\n [8] _start() at ./client.jl:506\r\nin expression starting at /tmp/.runfile_91448480884608366202.jl:4\r\n```\r\nNot sure how to debug those errors which are hidden behind Distributed.",
              "createdAt": "2020-09-28T23:23:33Z"
            },
            {
              "author":
              {
                "login": "sheevy"
              },
              "body": "Also, another note: when I replace `sqrt` with `neg` it works. Do we have anything to prevent the regression from constructing a tree when a negative number gets passed to `sqrt`? Similarly to what's done in `logm`. Perhaps that what's causing the error which is then swallowed/shadowed by the Distributed API.",
              "createdAt": "2020-09-28T23:41:46Z"
            },
            {
              "author":
              {
                "login": "MilesCranmer"
              },
              "body": "Ah, that issue with domain errors is potentially it... Can you try re-defining the sqrt operator to work for negative input? Like so:\r\n\r\n```\r\nimport sympy\r\nequations = pysr(X1, y1, niterations=100,\r\n            binary_operators=[\"plus\", \"mult\", \"div\"],\r\n            unary_operators=[\"sqrtm(x)=sqrt(abs(x))\"]\r\n)\r\n```\r\n\r\nI think I will also re-define sqrt and log to do this by default, it seems like this could give people a lot of issues without a decent error message.",
              "createdAt": "2020-09-29T10:01:10Z"
            },
            {
              "author":
              {
                "login": "MilesCranmer"
              },
              "body": "Okay, I added a `sqrtm` operator in 0.3.11. I also clarified on the readme that all operators/custom operators should be valid over the real line - if not, one can define them with, e.g., abs(x) as input.\r\n\r\nDoes that fix this?\r\n\r\nI suppose I should also add an assert at the start of the run function to test this on all operators (e.g., input a grid of numbers through each operator), so it is less annoying to debug.\r\n\r\nI agree that the Distributed package makes things annoying to debug... maybe I should add a \"debug mode\" that switches it off.",
              "createdAt": "2020-09-29T10:16:19Z"
            },
            {
              "author":
              {
                "login": "MilesCranmer"
              },
              "body": "Okay in 0.3.12 I made it so that the Julia code tests all operators before starting, and raises an error if there is a DomainError (the search code itself catches errors like these, since I think things like 1/x for x=0 are unavoidable - right now I simply catch such an error and assign a loss of 1e9). Let me know how this sounds!",
              "createdAt": "2020-09-29T10:29:33Z"
            },
            {
              "author":
              {
                "login": "MilesCranmer"
              },
              "body": "Just curious: I'm doing benchmarks right now, and 0.3.10 is actually frozen. Did you see something like the following issue on your machine?\r\n\r\n```\r\n/usr/bin/abrt-watch-log -F BUG: WARNING: at WARNING: CPU: INFO: possible recursive locking detected ernel BUG at list_del corruption list_add corruption do_IRQ: stack overflow: ear stack overflow (cur: eneral protection fault nable to handle kernel ouble fault: RTNL: assertion failed eek! page_mapcount(page) went negative! adness at NETDEV WATCHDOG ysctl table check failed : nobody cared IRQ handler type mismatch Kernel panic - not syncing: Machine Check Exception: Machine check events logged divide error: bounds: coprocessor segment overrun: invalid TSS: segment not present: invalid opcode: alignment check: stack segment: fpu exception: simd exception: iret exception: /var/log/messages -- /usr/bin/abrt-dump-oops -xtD\r\nmcranmer  655418  627863  0 16:19 pts/2    00:00:00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn abrt\r\n```\r\n\r\nIt seems that the recursive threading might cause some freezes on some systems (I observed it on linux, but not macOS).\r\n\r\nRegardless, I have removed the recursive threading in the latest versions, so this shouldn't cause an issue anymore.",
              "createdAt": "2020-09-29T20:22:07Z"
            },
            {
              "author":
              {
                "login": "MilesCranmer"
              },
              "body": "Also see #9 for speed discussion",
              "createdAt": "2020-09-29T20:38:11Z"
            },
            {
              "author":
              {
                "login": "sheevy"
              },
              "body": "Yes, it looked somewhat frozen, but I didn't see that error message.\r\nI'm on Linux indeed:\r\n```\r\n> uname -a\r\nLinux harpo 5.4.64-1-MANJARO #1 SMP PREEMPT Wed Sep 9 18:26:19 UTC 2020 x86_64 GNU/Linux\r\n```\r\nI just wildly guessed it has to do with `sqrt` as I couldn't replicate the behaviour when it was removed.",
              "createdAt": "2020-09-29T20:49:00Z"
            }
          ],
          "pageInfo":
          {
            "hasNextPage": false,
            "endCursor": "Y3Vyc29yOnYyOpHOKcgTkw=="
          }
        }
      }
    }
  }
}